// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/17/2025 14:13:15"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIC1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIC1_vlg_sample_tst(
	CLOCK,
	LOADN,
	sampler_tx
);
input  CLOCK;
input  LOADN;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or LOADN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIC1_vlg_check_tst (
	C_Bus,
	DATA_MEM,
	DATA_MEM_ADDR,
	DATA_MEM_OUT,
	DATA_MEM_write_enable,
	MBR_OUT,
	MIR,
	MPC,
	PC,
	sampler_rx
);
input [31:0] C_Bus;
input [31:0] DATA_MEM;
input [31:0] DATA_MEM_ADDR;
input [31:0] DATA_MEM_OUT;
input  DATA_MEM_write_enable;
input [7:0] MBR_OUT;
input [35:0] MIR;
input [8:0] MPC;
input [31:0] PC;
input sampler_rx;

reg [31:0] C_Bus_expected;
reg [31:0] DATA_MEM_expected;
reg [31:0] DATA_MEM_ADDR_expected;
reg [31:0] DATA_MEM_OUT_expected;
reg  DATA_MEM_write_enable_expected;
reg [7:0] MBR_OUT_expected;
reg [35:0] MIR_expected;
reg [8:0] MPC_expected;
reg [31:0] PC_expected;

reg [31:0] C_Bus_prev;
reg [31:0] DATA_MEM_prev;
reg [31:0] DATA_MEM_ADDR_prev;
reg [31:0] DATA_MEM_OUT_prev;
reg  DATA_MEM_write_enable_prev;
reg [7:0] MBR_OUT_prev;
reg [35:0] MIR_prev;
reg [8:0] MPC_prev;
reg [31:0] PC_prev;

reg [31:0] DATA_MEM_expected_prev;
reg [31:0] DATA_MEM_ADDR_expected_prev;
reg [31:0] DATA_MEM_OUT_expected_prev;
reg  DATA_MEM_write_enable_expected_prev;
reg [7:0] MBR_OUT_expected_prev;
reg [35:0] MIR_expected_prev;
reg [8:0] MPC_expected_prev;
reg [31:0] PC_expected_prev;

reg [31:0] last_DATA_MEM_exp;
reg [31:0] last_DATA_MEM_ADDR_exp;
reg [31:0] last_DATA_MEM_OUT_exp;
reg  last_DATA_MEM_write_enable_exp;
reg [7:0] last_MBR_OUT_exp;
reg [35:0] last_MIR_exp;
reg [8:0] last_MPC_exp;
reg [31:0] last_PC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_Bus_prev = C_Bus;
	DATA_MEM_prev = DATA_MEM;
	DATA_MEM_ADDR_prev = DATA_MEM_ADDR;
	DATA_MEM_OUT_prev = DATA_MEM_OUT;
	DATA_MEM_write_enable_prev = DATA_MEM_write_enable;
	MBR_OUT_prev = MBR_OUT;
	MIR_prev = MIR;
	MPC_prev = MPC;
	PC_prev = PC;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_MEM_expected_prev = DATA_MEM_expected;
	DATA_MEM_ADDR_expected_prev = DATA_MEM_ADDR_expected;
	DATA_MEM_OUT_expected_prev = DATA_MEM_OUT_expected;
	DATA_MEM_write_enable_expected_prev = DATA_MEM_write_enable_expected;
	MBR_OUT_expected_prev = MBR_OUT_expected;
	MIR_expected_prev = MIR_expected;
	MPC_expected_prev = MPC_expected;
	PC_expected_prev = PC_expected;
end


// expected DATA_MEM_ADDR[ 31 ]
initial
begin
	DATA_MEM_ADDR_expected[31] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 30 ]
initial
begin
	DATA_MEM_ADDR_expected[30] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 29 ]
initial
begin
	DATA_MEM_ADDR_expected[29] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 28 ]
initial
begin
	DATA_MEM_ADDR_expected[28] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 27 ]
initial
begin
	DATA_MEM_ADDR_expected[27] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 26 ]
initial
begin
	DATA_MEM_ADDR_expected[26] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 25 ]
initial
begin
	DATA_MEM_ADDR_expected[25] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 24 ]
initial
begin
	DATA_MEM_ADDR_expected[24] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 23 ]
initial
begin
	DATA_MEM_ADDR_expected[23] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 22 ]
initial
begin
	DATA_MEM_ADDR_expected[22] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 21 ]
initial
begin
	DATA_MEM_ADDR_expected[21] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 20 ]
initial
begin
	DATA_MEM_ADDR_expected[20] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 19 ]
initial
begin
	DATA_MEM_ADDR_expected[19] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 18 ]
initial
begin
	DATA_MEM_ADDR_expected[18] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 17 ]
initial
begin
	DATA_MEM_ADDR_expected[17] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 16 ]
initial
begin
	DATA_MEM_ADDR_expected[16] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 15 ]
initial
begin
	DATA_MEM_ADDR_expected[15] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 14 ]
initial
begin
	DATA_MEM_ADDR_expected[14] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 13 ]
initial
begin
	DATA_MEM_ADDR_expected[13] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 12 ]
initial
begin
	DATA_MEM_ADDR_expected[12] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 11 ]
initial
begin
	DATA_MEM_ADDR_expected[11] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 10 ]
initial
begin
	DATA_MEM_ADDR_expected[10] = 1'b0;
end 
// expected DATA_MEM_ADDR[ 9 ]
initial
begin
	DATA_MEM_ADDR_expected[9] = 1'b0;
	# 780000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[9] = 1'b1;
		DATA_MEM_ADDR_expected[9] = #100000 1'b0;
		# 700000;
	end
	repeat(4)
	begin
		DATA_MEM_ADDR_expected[9] = 1'b1;
		DATA_MEM_ADDR_expected[9] = #800000 1'b0;
		DATA_MEM_ADDR_expected[9] = #3500000 1'b1;
		DATA_MEM_ADDR_expected[9] = #100000 1'b0;
		# 2100000;
	end
	DATA_MEM_ADDR_expected[9] = 1'b1;
	DATA_MEM_ADDR_expected[9] = #800000 1'b0;
end 
// expected DATA_MEM_ADDR[ 8 ]
initial
begin
	DATA_MEM_ADDR_expected[8] = 1'b0;
	# 780000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[8] = 1'b1;
		DATA_MEM_ADDR_expected[8] = #100000 1'b0;
		# 700000;
	end
	repeat(4)
	begin
		DATA_MEM_ADDR_expected[8] = 1'b1;
		DATA_MEM_ADDR_expected[8] = #800000 1'b0;
		DATA_MEM_ADDR_expected[8] = #3500000 1'b1;
		DATA_MEM_ADDR_expected[8] = #100000 1'b0;
		# 2100000;
	end
	DATA_MEM_ADDR_expected[8] = 1'b1;
	DATA_MEM_ADDR_expected[8] = #800000 1'b0;
end 
// expected DATA_MEM_ADDR[ 7 ]
initial
begin
	DATA_MEM_ADDR_expected[7] = 1'b0;
	# 780000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[7] = 1'b1;
		DATA_MEM_ADDR_expected[7] = #100000 1'b0;
		# 700000;
	end
	repeat(4)
	begin
		DATA_MEM_ADDR_expected[7] = 1'b1;
		DATA_MEM_ADDR_expected[7] = #800000 1'b0;
		DATA_MEM_ADDR_expected[7] = #3500000 1'b1;
		DATA_MEM_ADDR_expected[7] = #100000 1'b0;
		# 2100000;
	end
	DATA_MEM_ADDR_expected[7] = 1'b1;
	DATA_MEM_ADDR_expected[7] = #800000 1'b0;
end 
// expected DATA_MEM_ADDR[ 6 ]
initial
begin
	DATA_MEM_ADDR_expected[6] = 1'b0;
	DATA_MEM_ADDR_expected[6] = #780000 1'b1;
end 
// expected DATA_MEM_ADDR[ 5 ]
initial
begin
	DATA_MEM_ADDR_expected[5] = 1'b0;
	# 780000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[5] = 1'b1;
		DATA_MEM_ADDR_expected[5] = #100000 1'b0;
		# 700000;
	end
	repeat(4)
	begin
		DATA_MEM_ADDR_expected[5] = 1'b1;
		DATA_MEM_ADDR_expected[5] = #800000 1'b0;
		DATA_MEM_ADDR_expected[5] = #3500000 1'b1;
		DATA_MEM_ADDR_expected[5] = #100000 1'b0;
		# 2100000;
	end
	DATA_MEM_ADDR_expected[5] = 1'b1;
	DATA_MEM_ADDR_expected[5] = #800000 1'b0;
end 
// expected DATA_MEM_ADDR[ 4 ]
initial
begin
	DATA_MEM_ADDR_expected[4] = 1'b0;
	# 780000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[4] = 1'b1;
		DATA_MEM_ADDR_expected[4] = #100000 1'b0;
		# 700000;
	end
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[4] = 1'b1;
		DATA_MEM_ADDR_expected[4] = #800000 1'b0;
		DATA_MEM_ADDR_expected[4] = #3500000 1'b1;
		DATA_MEM_ADDR_expected[4] = #100000 1'b0;
		# 2100000;
	end
	DATA_MEM_ADDR_expected[4] = 1'b1;
	DATA_MEM_ADDR_expected[4] = #800000 1'b0;
	DATA_MEM_ADDR_expected[4] = #3500000 1'b1;
	DATA_MEM_ADDR_expected[4] = #600000 1'b0;
	DATA_MEM_ADDR_expected[4] = #100000 1'b1;
	DATA_MEM_ADDR_expected[4] = #14300000 1'b0;
end 
// expected DATA_MEM_ADDR[ 3 ]
initial
begin
	DATA_MEM_ADDR_expected[3] = 1'b0;
	DATA_MEM_ADDR_expected[3] = #7780000 1'b1;
	DATA_MEM_ADDR_expected[3] = #400000 1'b0;
	DATA_MEM_ADDR_expected[3] = #2000000 1'b1;
	DATA_MEM_ADDR_expected[3] = #800000 1'b0;
	DATA_MEM_ADDR_expected[3] = #100000 1'b1;
	DATA_MEM_ADDR_expected[3] = #1300000 1'b0;
	DATA_MEM_ADDR_expected[3] = #100000 1'b1;
	DATA_MEM_ADDR_expected[3] = #700000 1'b0;
	DATA_MEM_ADDR_expected[3] = #100000 1'b1;
	DATA_MEM_ADDR_expected[3] = #500000 1'b0;
	DATA_MEM_ADDR_expected[3] = #100000 1'b1;
	DATA_MEM_ADDR_expected[3] = #1500000 1'b0;
	DATA_MEM_ADDR_expected[3] = #800000 1'b1;
	DATA_MEM_ADDR_expected[3] = #3500000 1'b0;
	DATA_MEM_ADDR_expected[3] = #600000 1'b1;
	DATA_MEM_ADDR_expected[3] = #100000 1'b0;
	DATA_MEM_ADDR_expected[3] = #9500000 1'b1;
	DATA_MEM_ADDR_expected[3] = #600000 1'b0;
	DATA_MEM_ADDR_expected[3] = #100000 1'b1;
	DATA_MEM_ADDR_expected[3] = #1900000 1'b0;
	DATA_MEM_ADDR_expected[3] = #300000 1'b1;
	DATA_MEM_ADDR_expected[3] = #200000 1'b0;
	DATA_MEM_ADDR_expected[3] = #1700000 1'b1;
	DATA_MEM_ADDR_expected[3] = #1700000 1'b0;
	DATA_MEM_ADDR_expected[3] = #200000 1'b1;
	DATA_MEM_ADDR_expected[3] = #300000 1'b0;
end 
// expected DATA_MEM_ADDR[ 2 ]
initial
begin
	DATA_MEM_ADDR_expected[2] = 1'b0;
	DATA_MEM_ADDR_expected[2] = #3880000 1'b1;
	DATA_MEM_ADDR_expected[2] = #600000 1'b0;
	DATA_MEM_ADDR_expected[2] = #100000 1'b1;
	DATA_MEM_ADDR_expected[2] = #1300000 1'b0;
	DATA_MEM_ADDR_expected[2] = #100000 1'b1;
	DATA_MEM_ADDR_expected[2] = #700000 1'b0;
	DATA_MEM_ADDR_expected[2] = #100000 1'b1;
	DATA_MEM_ADDR_expected[2] = #500000 1'b0;
	DATA_MEM_ADDR_expected[2] = #100000 1'b1;
	DATA_MEM_ADDR_expected[2] = #400000 1'b0;
	DATA_MEM_ADDR_expected[2] = #400000 1'b1;
	DATA_MEM_ADDR_expected[2] = #700000 1'b0;
	DATA_MEM_ADDR_expected[2] = #800000 1'b1;
	DATA_MEM_ADDR_expected[2] = #500000 1'b0;
	# 800000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[2] = 1'b1;
		DATA_MEM_ADDR_expected[2] = #100000 1'b0;
		# 1300000;
	end
	DATA_MEM_ADDR_expected[2] = 1'b1;
	DATA_MEM_ADDR_expected[2] = #1600000 1'b0;
	DATA_MEM_ADDR_expected[2] = #1300000 1'b1;
	DATA_MEM_ADDR_expected[2] = #3000000 1'b0;
	DATA_MEM_ADDR_expected[2] = #600000 1'b1;
	DATA_MEM_ADDR_expected[2] = #100000 1'b0;
	DATA_MEM_ADDR_expected[2] = #3700000 1'b1;
	DATA_MEM_ADDR_expected[2] = #400000 1'b0;
	DATA_MEM_ADDR_expected[2] = #1000000 1'b1;
	DATA_MEM_ADDR_expected[2] = #700000 1'b0;
	DATA_MEM_ADDR_expected[2] = #100000 1'b1;
	DATA_MEM_ADDR_expected[2] = #500000 1'b0;
	DATA_MEM_ADDR_expected[2] = #100000 1'b1;
	DATA_MEM_ADDR_expected[2] = #1500000 1'b0;
	DATA_MEM_ADDR_expected[2] = #800000 1'b1;
	DATA_MEM_ADDR_expected[2] = #700000 1'b0;
	DATA_MEM_ADDR_expected[2] = #600000 1'b1;
	DATA_MEM_ADDR_expected[2] = #100000 1'b0;
	DATA_MEM_ADDR_expected[2] = #1900000 1'b1;
	DATA_MEM_ADDR_expected[2] = #300000 1'b0;
	DATA_MEM_ADDR_expected[2] = #200000 1'b1;
	DATA_MEM_ADDR_expected[2] = #800000 1'b0;
	DATA_MEM_ADDR_expected[2] = #900000 1'b1;
	DATA_MEM_ADDR_expected[2] = #400000 1'b0;
	DATA_MEM_ADDR_expected[2] = #200000 1'b1;
	DATA_MEM_ADDR_expected[2] = #300000 1'b0;
	DATA_MEM_ADDR_expected[2] = #800000 1'b1;
	DATA_MEM_ADDR_expected[2] = #200000 1'b0;
	DATA_MEM_ADDR_expected[2] = #300000 1'b1;
	DATA_MEM_ADDR_expected[2] = #800000 1'b0;
	DATA_MEM_ADDR_expected[2] = #300000 1'b1;
	DATA_MEM_ADDR_expected[2] = #200000 1'b0;
end 
// expected DATA_MEM_ADDR[ 1 ]
initial
begin
	DATA_MEM_ADDR_expected[1] = 1'b0;
	DATA_MEM_ADDR_expected[1] = #1680000 1'b1;
	DATA_MEM_ADDR_expected[1] = #1500000 1'b0;
	DATA_MEM_ADDR_expected[1] = #500000 1'b1;
	DATA_MEM_ADDR_expected[1] = #200000 1'b0;
	DATA_MEM_ADDR_expected[1] = #600000 1'b1;
	DATA_MEM_ADDR_expected[1] = #100000 1'b0;
	DATA_MEM_ADDR_expected[1] = #1300000 1'b1;
	DATA_MEM_ADDR_expected[1] = #100000 1'b0;
	DATA_MEM_ADDR_expected[1] = #800000 1'b1;
	DATA_MEM_ADDR_expected[1] = #1000000 1'b0;
	DATA_MEM_ADDR_expected[1] = #400000 1'b1;
	DATA_MEM_ADDR_expected[1] = #2000000 1'b0;
	DATA_MEM_ADDR_expected[1] = #800000 1'b1;
	DATA_MEM_ADDR_expected[1] = #500000 1'b0;
	DATA_MEM_ADDR_expected[1] = #900000 1'b1;
	DATA_MEM_ADDR_expected[1] = #800000 1'b0;
	DATA_MEM_ADDR_expected[1] = #100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #600000 1'b0;
	DATA_MEM_ADDR_expected[1] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[1] = #1300000 1'b0;
	DATA_MEM_ADDR_expected[1] = #200000 1'b1;
	DATA_MEM_ADDR_expected[1] = #600000 1'b0;
	DATA_MEM_ADDR_expected[1] = #100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #1300000 1'b0;
	DATA_MEM_ADDR_expected[1] = #100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #700000 1'b0;
	DATA_MEM_ADDR_expected[1] = #1100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #400000 1'b0;
	# 700000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[1] = 1'b1;
		DATA_MEM_ADDR_expected[1] = #800000 1'b0;
		# 500000;
	end
	DATA_MEM_ADDR_expected[1] = 1'b1;
	DATA_MEM_ADDR_expected[1] = #900000 1'b0;
	DATA_MEM_ADDR_expected[1] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[1] = #2300000 1'b0;
	DATA_MEM_ADDR_expected[1] = #500000 1'b1;
	DATA_MEM_ADDR_expected[1] = #200000 1'b0;
	DATA_MEM_ADDR_expected[1] = #600000 1'b1;
	DATA_MEM_ADDR_expected[1] = #100000 1'b0;
	DATA_MEM_ADDR_expected[1] = #2100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #100000 1'b0;
	DATA_MEM_ADDR_expected[1] = #1200000 1'b1;
	DATA_MEM_ADDR_expected[1] = #300000 1'b0;
	DATA_MEM_ADDR_expected[1] = #400000 1'b1;
	DATA_MEM_ADDR_expected[1] = #600000 1'b0;
	DATA_MEM_ADDR_expected[1] = #100000 1'b1;
	DATA_MEM_ADDR_expected[1] = #1200000 1'b0;
	DATA_MEM_ADDR_expected[1] = #300000 1'b1;
	DATA_MEM_ADDR_expected[1] = #400000 1'b0;
	DATA_MEM_ADDR_expected[1] = #600000 1'b1;
	DATA_MEM_ADDR_expected[1] = #100000 1'b0;
	DATA_MEM_ADDR_expected[1] = #600000 1'b1;
end 
// expected DATA_MEM_ADDR[ 0 ]
initial
begin
	DATA_MEM_ADDR_expected[0] = 1'b0;
	DATA_MEM_ADDR_expected[0] = #880000 1'b1;
	DATA_MEM_ADDR_expected[0] = #800000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #700000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1000000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #700000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #400000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #400000 1'b1;
	DATA_MEM_ADDR_expected[0] = #1000000 1'b0;
	DATA_MEM_ADDR_expected[0] = #800000 1'b1;
	DATA_MEM_ADDR_expected[0] = #600000 1'b0;
	DATA_MEM_ADDR_expected[0] = #400000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #700000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1000000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #700000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #400000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #400000 1'b1;
	DATA_MEM_ADDR_expected[0] = #1000000 1'b0;
	DATA_MEM_ADDR_expected[0] = #800000 1'b1;
	DATA_MEM_ADDR_expected[0] = #600000 1'b0;
	DATA_MEM_ADDR_expected[0] = #400000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	DATA_MEM_ADDR_expected[0] = #1500000 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #700000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
	# 1100000;
	repeat(2)
	begin
		DATA_MEM_ADDR_expected[0] = 1'b1;
		DATA_MEM_ADDR_expected[0] = #700000 1'b0;
		DATA_MEM_ADDR_expected[0] = #200000 1'b1;
		DATA_MEM_ADDR_expected[0] = #400000 1'b0;
		DATA_MEM_ADDR_expected[0] = #700000 1'b1;
		DATA_MEM_ADDR_expected[0] = #200000 1'b0;
		# 400000;
	end
	DATA_MEM_ADDR_expected[0] = 1'b1;
	DATA_MEM_ADDR_expected[0] = #700000 1'b0;
	DATA_MEM_ADDR_expected[0] = #200000 1'b1;
	DATA_MEM_ADDR_expected[0] = #400000 1'b0;
end 
// expected DATA_MEM_OUT[ 31 ]
initial
begin
	DATA_MEM_OUT_expected[31] = 1'b0;
end 
// expected DATA_MEM_OUT[ 30 ]
initial
begin
	DATA_MEM_OUT_expected[30] = 1'b0;
end 
// expected DATA_MEM_OUT[ 29 ]
initial
begin
	DATA_MEM_OUT_expected[29] = 1'b0;
end 
// expected DATA_MEM_OUT[ 28 ]
initial
begin
	DATA_MEM_OUT_expected[28] = 1'b0;
end 
// expected DATA_MEM_OUT[ 27 ]
initial
begin
	DATA_MEM_OUT_expected[27] = 1'b0;
end 
// expected DATA_MEM_OUT[ 26 ]
initial
begin
	DATA_MEM_OUT_expected[26] = 1'b0;
end 
// expected DATA_MEM_OUT[ 25 ]
initial
begin
	DATA_MEM_OUT_expected[25] = 1'b0;
end 
// expected DATA_MEM_OUT[ 24 ]
initial
begin
	DATA_MEM_OUT_expected[24] = 1'b0;
end 
// expected DATA_MEM_OUT[ 23 ]
initial
begin
	DATA_MEM_OUT_expected[23] = 1'b0;
end 
// expected DATA_MEM_OUT[ 22 ]
initial
begin
	DATA_MEM_OUT_expected[22] = 1'b0;
end 
// expected DATA_MEM_OUT[ 21 ]
initial
begin
	DATA_MEM_OUT_expected[21] = 1'b0;
end 
// expected DATA_MEM_OUT[ 20 ]
initial
begin
	DATA_MEM_OUT_expected[20] = 1'b0;
end 
// expected DATA_MEM_OUT[ 19 ]
initial
begin
	DATA_MEM_OUT_expected[19] = 1'b0;
end 
// expected DATA_MEM_OUT[ 18 ]
initial
begin
	DATA_MEM_OUT_expected[18] = 1'b0;
end 
// expected DATA_MEM_OUT[ 17 ]
initial
begin
	DATA_MEM_OUT_expected[17] = 1'b0;
end 
// expected DATA_MEM_OUT[ 16 ]
initial
begin
	DATA_MEM_OUT_expected[16] = 1'b0;
end 
// expected DATA_MEM_OUT[ 15 ]
initial
begin
	DATA_MEM_OUT_expected[15] = 1'b0;
	DATA_MEM_OUT_expected[15] = #880000 1'b1;
	DATA_MEM_OUT_expected[15] = #800000 1'b0;
	# 5100000;
	repeat(3)
	begin
		DATA_MEM_OUT_expected[15] = 1'b1;
		DATA_MEM_OUT_expected[15] = #600000 1'b0;
		# 5900000;
	end
	DATA_MEM_OUT_expected[15] = 1'b1;
	DATA_MEM_OUT_expected[15] = #600000 1'b0;
end 
// expected DATA_MEM_OUT[ 14 ]
initial
begin
	DATA_MEM_OUT_expected[14] = 1'b0;
	DATA_MEM_OUT_expected[14] = #880000 1'b1;
	DATA_MEM_OUT_expected[14] = #800000 1'b0;
	# 5100000;
	repeat(3)
	begin
		DATA_MEM_OUT_expected[14] = 1'b1;
		DATA_MEM_OUT_expected[14] = #600000 1'b0;
		# 5900000;
	end
	DATA_MEM_OUT_expected[14] = 1'b1;
	DATA_MEM_OUT_expected[14] = #600000 1'b0;
end 
// expected DATA_MEM_OUT[ 13 ]
initial
begin
	DATA_MEM_OUT_expected[13] = 1'b0;
end 
// expected DATA_MEM_OUT[ 12 ]
initial
begin
	DATA_MEM_OUT_expected[12] = 1'b0;
end 
// expected DATA_MEM_OUT[ 11 ]
initial
begin
	DATA_MEM_OUT_expected[11] = 1'b0;
	DATA_MEM_OUT_expected[11] = #880000 1'b1;
	DATA_MEM_OUT_expected[11] = #800000 1'b0;
	# 5100000;
	repeat(3)
	begin
		DATA_MEM_OUT_expected[11] = 1'b1;
		DATA_MEM_OUT_expected[11] = #600000 1'b0;
		# 5900000;
	end
	DATA_MEM_OUT_expected[11] = 1'b1;
	DATA_MEM_OUT_expected[11] = #600000 1'b0;
end 
// expected DATA_MEM_OUT[ 10 ]
initial
begin
	DATA_MEM_OUT_expected[10] = 1'b0;
end 
// expected DATA_MEM_OUT[ 9 ]
initial
begin
	DATA_MEM_OUT_expected[9] = 1'b0;
	DATA_MEM_OUT_expected[9] = #880000 1'b1;
	DATA_MEM_OUT_expected[9] = #800000 1'b0;
	# 5100000;
	repeat(3)
	begin
		DATA_MEM_OUT_expected[9] = 1'b1;
		DATA_MEM_OUT_expected[9] = #600000 1'b0;
		# 5900000;
	end
	DATA_MEM_OUT_expected[9] = 1'b1;
	DATA_MEM_OUT_expected[9] = #600000 1'b0;
end 
// expected DATA_MEM_OUT[ 8 ]
initial
begin
	DATA_MEM_OUT_expected[8] = 1'b0;
end 
// expected DATA_MEM_OUT[ 7 ]
initial
begin
	DATA_MEM_OUT_expected[7] = 1'b0;
	DATA_MEM_OUT_expected[7] = #880000 1'b1;
	DATA_MEM_OUT_expected[7] = #800000 1'b0;
	# 5100000;
	repeat(3)
	begin
		DATA_MEM_OUT_expected[7] = 1'b1;
		DATA_MEM_OUT_expected[7] = #600000 1'b0;
		# 5900000;
	end
	DATA_MEM_OUT_expected[7] = 1'b1;
	DATA_MEM_OUT_expected[7] = #600000 1'b0;
end 
// expected DATA_MEM_OUT[ 6 ]
initial
begin
	DATA_MEM_OUT_expected[6] = 1'b0;
	DATA_MEM_OUT_expected[6] = #880000 1'b1;
	DATA_MEM_OUT_expected[6] = #800000 1'b0;
	DATA_MEM_OUT_expected[6] = #800000 1'b1;
	DATA_MEM_OUT_expected[6] = #1300000 1'b0;
	DATA_MEM_OUT_expected[6] = #200000 1'b1;
	# 600000;
	repeat(4)
	begin
		DATA_MEM_OUT_expected[6] = 1'b0;
		DATA_MEM_OUT_expected[6] = #500000 1'b1;
		DATA_MEM_OUT_expected[6] = #900000 1'b0;
		DATA_MEM_OUT_expected[6] = #800000 1'b1;
		DATA_MEM_OUT_expected[6] = #600000 1'b0;
		DATA_MEM_OUT_expected[6] = #1600000 1'b1;
		# 2100000;
	end
	DATA_MEM_OUT_expected[6] = 1'b0;
	DATA_MEM_OUT_expected[6] = #500000 1'b1;
	DATA_MEM_OUT_expected[6] = #1200000 1'b0;
	# 300000;
	repeat(4)
	begin
		DATA_MEM_OUT_expected[6] = 1'b1;
		DATA_MEM_OUT_expected[6] = #600000 1'b0;
		# 700000;
	end
	DATA_MEM_OUT_expected[6] = 1'b1;
	DATA_MEM_OUT_expected[6] = #200000 1'b0;
	DATA_MEM_OUT_expected[6] = #200000 1'b1;
	DATA_MEM_OUT_expected[6] = #200000 1'b0;
end 
// expected DATA_MEM_OUT[ 5 ]
initial
begin
	DATA_MEM_OUT_expected[5] = 1'b0;
	DATA_MEM_OUT_expected[5] = #880000 1'b1;
	DATA_MEM_OUT_expected[5] = #800000 1'b0;
	DATA_MEM_OUT_expected[5] = #800000 1'b1;
	DATA_MEM_OUT_expected[5] = #1100000 1'b0;
	# 3200000;
	repeat(4)
	begin
		DATA_MEM_OUT_expected[5] = 1'b1;
		DATA_MEM_OUT_expected[5] = #600000 1'b0;
		DATA_MEM_OUT_expected[5] = #1600000 1'b1;
		DATA_MEM_OUT_expected[5] = #1100000 1'b0;
		DATA_MEM_OUT_expected[5] = #200000 1'b1;
		DATA_MEM_OUT_expected[5] = #200000 1'b0;
		# 2800000;
	end
	repeat(3)
	begin
		DATA_MEM_OUT_expected[5] = 1'b1;
		DATA_MEM_OUT_expected[5] = #200000 1'b0;
		# 1100000;
	end
	DATA_MEM_OUT_expected[5] = 1'b1;
	DATA_MEM_OUT_expected[5] = #200000 1'b0;
end 
// expected DATA_MEM_OUT[ 4 ]
initial
begin
	DATA_MEM_OUT_expected[4] = 1'b0;
	DATA_MEM_OUT_expected[4] = #880000 1'b1;
	DATA_MEM_OUT_expected[4] = #800000 1'b0;
	# 5100000;
	repeat(2)
	begin
		DATA_MEM_OUT_expected[4] = 1'b1;
		DATA_MEM_OUT_expected[4] = #600000 1'b0;
		DATA_MEM_OUT_expected[4] = #2900000 1'b1;
		DATA_MEM_OUT_expected[4] = #200000 1'b0;
		# 2800000;
	end
	DATA_MEM_OUT_expected[4] = 1'b1;
	DATA_MEM_OUT_expected[4] = #600000 1'b0;
	DATA_MEM_OUT_expected[4] = #2700000 1'b1;
	DATA_MEM_OUT_expected[4] = #400000 1'b0;
	DATA_MEM_OUT_expected[4] = #2800000 1'b1;
	DATA_MEM_OUT_expected[4] = #600000 1'b0;
	DATA_MEM_OUT_expected[4] = #2700000 1'b1;
	DATA_MEM_OUT_expected[4] = #1000000 1'b0;
	DATA_MEM_OUT_expected[4] = #500000 1'b1;
	DATA_MEM_OUT_expected[4] = #1200000 1'b0;
	DATA_MEM_OUT_expected[4] = #300000 1'b1;
	DATA_MEM_OUT_expected[4] = #600000 1'b0;
	DATA_MEM_OUT_expected[4] = #700000 1'b1;
	# 400000;
	repeat(2)
	begin
		DATA_MEM_OUT_expected[4] = 1'b0;
		DATA_MEM_OUT_expected[4] = #1100000 1'b1;
		# 200000;
	end
	DATA_MEM_OUT_expected[4] = 1'b0;
end 
// expected DATA_MEM_OUT[ 3 ]
initial
begin
	DATA_MEM_OUT_expected[3] = 1'b0;
	DATA_MEM_OUT_expected[3] = #880000 1'b1;
	DATA_MEM_OUT_expected[3] = #800000 1'b0;
	DATA_MEM_OUT_expected[3] = #2100000 1'b1;
	# 200000;
	repeat(2)
	begin
		DATA_MEM_OUT_expected[3] = 1'b0;
		DATA_MEM_OUT_expected[3] = #2800000 1'b1;
		DATA_MEM_OUT_expected[3] = #600000 1'b0;
		DATA_MEM_OUT_expected[3] = #2700000 1'b1;
		# 400000;
	end
	DATA_MEM_OUT_expected[3] = 1'b0;
	DATA_MEM_OUT_expected[3] = #2800000 1'b1;
	DATA_MEM_OUT_expected[3] = #600000 1'b0;
	DATA_MEM_OUT_expected[3] = #2900000 1'b1;
	DATA_MEM_OUT_expected[3] = #800000 1'b0;
	DATA_MEM_OUT_expected[3] = #500000 1'b1;
	DATA_MEM_OUT_expected[3] = #900000 1'b0;
	DATA_MEM_OUT_expected[3] = #800000 1'b1;
	DATA_MEM_OUT_expected[3] = #600000 1'b0;
	DATA_MEM_OUT_expected[3] = #2900000 1'b1;
	DATA_MEM_OUT_expected[3] = #200000 1'b0;
	DATA_MEM_OUT_expected[3] = #2800000 1'b1;
	DATA_MEM_OUT_expected[3] = #200000 1'b0;
	DATA_MEM_OUT_expected[3] = #1100000 1'b1;
	DATA_MEM_OUT_expected[3] = #400000 1'b0;
	DATA_MEM_OUT_expected[3] = #700000 1'b1;
	DATA_MEM_OUT_expected[3] = #400000 1'b0;
	DATA_MEM_OUT_expected[3] = #900000 1'b1;
	DATA_MEM_OUT_expected[3] = #400000 1'b0;
	DATA_MEM_OUT_expected[3] = #600000 1'b1;
	DATA_MEM_OUT_expected[3] = #300000 1'b0;
	DATA_MEM_OUT_expected[3] = #200000 1'b1;
	DATA_MEM_OUT_expected[3] = #200000 1'b0;
	DATA_MEM_OUT_expected[3] = #200000 1'b1;
end 
// expected DATA_MEM_OUT[ 2 ]
initial
begin
	DATA_MEM_OUT_expected[2] = 1'b0;
	DATA_MEM_OUT_expected[2] = #880000 1'b1;
	DATA_MEM_OUT_expected[2] = #2700000 1'b0;
	DATA_MEM_OUT_expected[2] = #1000000 1'b1;
	DATA_MEM_OUT_expected[2] = #500000 1'b0;
	DATA_MEM_OUT_expected[2] = #900000 1'b1;
	DATA_MEM_OUT_expected[2] = #2000000 1'b0;
	DATA_MEM_OUT_expected[2] = #300000 1'b1;
	DATA_MEM_OUT_expected[2] = #100000 1'b0;
	DATA_MEM_OUT_expected[2] = #600000 1'b1;
	DATA_MEM_OUT_expected[2] = #1100000 1'b0;
	DATA_MEM_OUT_expected[2] = #3200000 1'b1;
	DATA_MEM_OUT_expected[2] = #600000 1'b0;
	DATA_MEM_OUT_expected[2] = #1600000 1'b1;
	DATA_MEM_OUT_expected[2] = #1300000 1'b0;
	DATA_MEM_OUT_expected[2] = #200000 1'b1;
	DATA_MEM_OUT_expected[2] = #600000 1'b0;
	DATA_MEM_OUT_expected[2] = #500000 1'b1;
	DATA_MEM_OUT_expected[2] = #900000 1'b0;
	DATA_MEM_OUT_expected[2] = #800000 1'b1;
	DATA_MEM_OUT_expected[2] = #600000 1'b0;
	DATA_MEM_OUT_expected[2] = #1600000 1'b1;
	DATA_MEM_OUT_expected[2] = #1100000 1'b0;
	DATA_MEM_OUT_expected[2] = #3200000 1'b1;
	DATA_MEM_OUT_expected[2] = #600000 1'b0;
	DATA_MEM_OUT_expected[2] = #1600000 1'b1;
	DATA_MEM_OUT_expected[2] = #1300000 1'b0;
	DATA_MEM_OUT_expected[2] = #2800000 1'b1;
	DATA_MEM_OUT_expected[2] = #200000 1'b0;
	DATA_MEM_OUT_expected[2] = #2400000 1'b1;
	DATA_MEM_OUT_expected[2] = #200000 1'b0;
	DATA_MEM_OUT_expected[2] = #200000 1'b1;
	DATA_MEM_OUT_expected[2] = #200000 1'b0;
	DATA_MEM_OUT_expected[2] = #400000 1'b1;
	DATA_MEM_OUT_expected[2] = #300000 1'b0;
	DATA_MEM_OUT_expected[2] = #600000 1'b1;
	DATA_MEM_OUT_expected[2] = #400000 1'b0;
end 
// expected DATA_MEM_OUT[ 1 ]
initial
begin
	DATA_MEM_OUT_expected[1] = 1'b0;
	DATA_MEM_OUT_expected[1] = #880000 1'b1;
	DATA_MEM_OUT_expected[1] = #800000 1'b0;
	DATA_MEM_OUT_expected[1] = #1900000 1'b1;
	DATA_MEM_OUT_expected[1] = #400000 1'b0;
	DATA_MEM_OUT_expected[1] = #2800000 1'b1;
	DATA_MEM_OUT_expected[1] = #600000 1'b0;
	DATA_MEM_OUT_expected[1] = #1000000 1'b1;
	DATA_MEM_OUT_expected[1] = #600000 1'b0;
	DATA_MEM_OUT_expected[1] = #1300000 1'b1;
	DATA_MEM_OUT_expected[1] = #200000 1'b0;
	DATA_MEM_OUT_expected[1] = #600000 1'b1;
	DATA_MEM_OUT_expected[1] = #500000 1'b0;
	DATA_MEM_OUT_expected[1] = #900000 1'b1;
	DATA_MEM_OUT_expected[1] = #2000000 1'b0;
	DATA_MEM_OUT_expected[1] = #300000 1'b1;
	DATA_MEM_OUT_expected[1] = #700000 1'b0;
	DATA_MEM_OUT_expected[1] = #1300000 1'b1;
	DATA_MEM_OUT_expected[1] = #4200000 1'b0;
	DATA_MEM_OUT_expected[1] = #300000 1'b1;
	DATA_MEM_OUT_expected[1] = #100000 1'b0;
	DATA_MEM_OUT_expected[1] = #1700000 1'b1;
	DATA_MEM_OUT_expected[1] = #1000000 1'b0;
	DATA_MEM_OUT_expected[1] = #500000 1'b1;
	DATA_MEM_OUT_expected[1] = #900000 1'b0;
	DATA_MEM_OUT_expected[1] = #800000 1'b1;
	DATA_MEM_OUT_expected[1] = #600000 1'b0;
	DATA_MEM_OUT_expected[1] = #2700000 1'b1;
	DATA_MEM_OUT_expected[1] = #400000 1'b0;
	DATA_MEM_OUT_expected[1] = #2600000 1'b1;
	DATA_MEM_OUT_expected[1] = #400000 1'b0;
	DATA_MEM_OUT_expected[1] = #900000 1'b1;
	DATA_MEM_OUT_expected[1] = #600000 1'b0;
	DATA_MEM_OUT_expected[1] = #300000 1'b1;
	DATA_MEM_OUT_expected[1] = #400000 1'b0;
	DATA_MEM_OUT_expected[1] = #200000 1'b1;
	DATA_MEM_OUT_expected[1] = #1100000 1'b0;
	DATA_MEM_OUT_expected[1] = #200000 1'b1;
	DATA_MEM_OUT_expected[1] = #200000 1'b0;
	DATA_MEM_OUT_expected[1] = #200000 1'b1;
	DATA_MEM_OUT_expected[1] = #300000 1'b0;
	DATA_MEM_OUT_expected[1] = #100000 1'b1;
	DATA_MEM_OUT_expected[1] = #700000 1'b0;
	DATA_MEM_OUT_expected[1] = #200000 1'b1;
end 
// expected DATA_MEM_OUT[ 0 ]
initial
begin
	DATA_MEM_OUT_expected[0] = 1'b0;
	DATA_MEM_OUT_expected[0] = #3580000 1'b1;
	DATA_MEM_OUT_expected[0] = #200000 1'b0;
	DATA_MEM_OUT_expected[0] = #4200000 1'b1;
	DATA_MEM_OUT_expected[0] = #300000 1'b0;
	DATA_MEM_OUT_expected[0] = #100000 1'b1;
	DATA_MEM_OUT_expected[0] = #600000 1'b0;
	DATA_MEM_OUT_expected[0] = #1500000 1'b1;
	DATA_MEM_OUT_expected[0] = #2800000 1'b0;
	DATA_MEM_OUT_expected[0] = #600000 1'b1;
	DATA_MEM_OUT_expected[0] = #1000000 1'b0;
	DATA_MEM_OUT_expected[0] = #1700000 1'b1;
	DATA_MEM_OUT_expected[0] = #200000 1'b0;
	DATA_MEM_OUT_expected[0] = #4200000 1'b1;
	DATA_MEM_OUT_expected[0] = #300000 1'b0;
	DATA_MEM_OUT_expected[0] = #100000 1'b1;
	DATA_MEM_OUT_expected[0] = #600000 1'b0;
	DATA_MEM_OUT_expected[0] = #1500000 1'b1;
	DATA_MEM_OUT_expected[0] = #2800000 1'b0;
	DATA_MEM_OUT_expected[0] = #600000 1'b1;
	DATA_MEM_OUT_expected[0] = #1000000 1'b0;
	DATA_MEM_OUT_expected[0] = #1700000 1'b1;
	DATA_MEM_OUT_expected[0] = #200000 1'b0;
	DATA_MEM_OUT_expected[0] = #2800000 1'b1;
	DATA_MEM_OUT_expected[0] = #200000 1'b0;
	DATA_MEM_OUT_expected[0] = #700000 1'b1;
	DATA_MEM_OUT_expected[0] = #400000 1'b0;
	DATA_MEM_OUT_expected[0] = #400000 1'b1;
	DATA_MEM_OUT_expected[0] = #500000 1'b0;
	DATA_MEM_OUT_expected[0] = #100000 1'b1;
	DATA_MEM_OUT_expected[0] = #500000 1'b0;
	DATA_MEM_OUT_expected[0] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		DATA_MEM_OUT_expected[0] = 1'b0;
		DATA_MEM_OUT_expected[0] = #700000 1'b1;
		# 200000;
	end
	DATA_MEM_OUT_expected[0] = 1'b0;
end 

// expected DATA_MEM_write_enable
initial
begin
	DATA_MEM_write_enable_expected = 1'b0;
	DATA_MEM_write_enable_expected = #980000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #700000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 1700000;
	repeat(2)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 100000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #600000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #1300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #700000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #500000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #400000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 100000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #600000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #1300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #700000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #500000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #400000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 100000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #600000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #1300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #700000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #500000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #400000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 100000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #600000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #1300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #700000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #500000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #400000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #300000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 100000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #600000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	# 1500000;
	repeat(4)
	begin
		DATA_MEM_write_enable_expected = 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		DATA_MEM_write_enable_expected = #800000 1'b1;
		DATA_MEM_write_enable_expected = #100000 1'b0;
		# 300000;
	end
	DATA_MEM_write_enable_expected = 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #800000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
	DATA_MEM_write_enable_expected = #200000 1'b1;
	DATA_MEM_write_enable_expected = #100000 1'b0;
end 
// expected PC[ 31 ]
initial
begin
	PC_expected[31] = 1'b0;
end 
// expected PC[ 30 ]
initial
begin
	PC_expected[30] = 1'b0;
end 
// expected PC[ 29 ]
initial
begin
	PC_expected[29] = 1'b0;
end 
// expected PC[ 28 ]
initial
begin
	PC_expected[28] = 1'b0;
end 
// expected PC[ 27 ]
initial
begin
	PC_expected[27] = 1'b0;
end 
// expected PC[ 26 ]
initial
begin
	PC_expected[26] = 1'b0;
end 
// expected PC[ 25 ]
initial
begin
	PC_expected[25] = 1'b0;
end 
// expected PC[ 24 ]
initial
begin
	PC_expected[24] = 1'b0;
end 
// expected PC[ 23 ]
initial
begin
	PC_expected[23] = 1'b0;
end 
// expected PC[ 22 ]
initial
begin
	PC_expected[22] = 1'b0;
end 
// expected PC[ 21 ]
initial
begin
	PC_expected[21] = 1'b0;
end 
// expected PC[ 20 ]
initial
begin
	PC_expected[20] = 1'b0;
end 
// expected PC[ 19 ]
initial
begin
	PC_expected[19] = 1'b0;
end 
// expected PC[ 18 ]
initial
begin
	PC_expected[18] = 1'b0;
end 
// expected PC[ 17 ]
initial
begin
	PC_expected[17] = 1'b0;
end 
// expected PC[ 16 ]
initial
begin
	PC_expected[16] = 1'b0;
end 
// expected PC[ 15 ]
initial
begin
	PC_expected[15] = 1'b0;
end 
// expected PC[ 14 ]
initial
begin
	PC_expected[14] = 1'b0;
end 
// expected PC[ 13 ]
initial
begin
	PC_expected[13] = 1'b0;
end 
// expected PC[ 12 ]
initial
begin
	PC_expected[12] = 1'b0;
end 
// expected PC[ 11 ]
initial
begin
	PC_expected[11] = 1'b0;
end 
// expected PC[ 10 ]
initial
begin
	PC_expected[10] = 1'b0;
end 
// expected PC[ 9 ]
initial
begin
	PC_expected[9] = 1'b0;
end 
// expected PC[ 8 ]
initial
begin
	PC_expected[8] = 1'b0;
end 
// expected PC[ 7 ]
initial
begin
	PC_expected[7] = 1'b0;
end 
// expected PC[ 6 ]
initial
begin
	PC_expected[6] = 1'b0;
	PC_expected[6] = #2580000 1'b1;
	PC_expected[6] = #35500000 1'b0;
end 
// expected PC[ 5 ]
initial
begin
	PC_expected[5] = 1'b0;
	PC_expected[5] = #2580000 1'b1;
	PC_expected[5] = #35500000 1'b0;
end 
// expected PC[ 4 ]
initial
begin
	PC_expected[4] = 1'b0;
	# 6280000;
	repeat(3)
	begin
		PC_expected[4] = 1'b1;
		PC_expected[4] = #2800000 1'b0;
		# 3700000;
	end
	PC_expected[4] = 1'b1;
	PC_expected[4] = #2800000 1'b0;
	PC_expected[4] = #3200000 1'b1;
	PC_expected[4] = #6300000 1'b0;
	PC_expected[4] = #1600000 1'b1;
end 
// expected PC[ 3 ]
initial
begin
	PC_expected[3] = 1'b0;
	# 1980000;
	repeat(4)
	begin
		PC_expected[3] = 1'b1;
		PC_expected[3] = #600000 1'b0;
		PC_expected[3] = #1500000 1'b1;
		PC_expected[3] = #2200000 1'b0;
		# 2200000;
	end
	PC_expected[3] = 1'b1;
	PC_expected[3] = #600000 1'b0;
	PC_expected[3] = #1500000 1'b1;
	PC_expected[3] = #9600000 1'b0;
end 
// expected PC[ 2 ]
initial
begin
	PC_expected[2] = 1'b0;
	# 980000;
	repeat(4)
	begin
		PC_expected[2] = 1'b1;
		PC_expected[2] = #1000000 1'b0;
		PC_expected[2] = #600000 1'b1;
		PC_expected[2] = #1500000 1'b0;
		PC_expected[2] = #1300000 1'b1;
		PC_expected[2] = #900000 1'b0;
		# 1200000;
	end
	PC_expected[2] = 1'b1;
	PC_expected[2] = #1000000 1'b0;
	PC_expected[2] = #600000 1'b1;
	PC_expected[2] = #1500000 1'b0;
	PC_expected[2] = #1400000 1'b1;
	# 1400000;
	repeat(4)
	begin
		PC_expected[2] = 1'b0;
		PC_expected[2] = #800000 1'b1;
		# 500000;
	end
	PC_expected[2] = 1'b0;
	PC_expected[2] = #700000 1'b1;
	PC_expected[2] = #900000 1'b0;
end 
// expected PC[ 1 ]
initial
begin
	PC_expected[1] = 1'b0;
	PC_expected[1] = #380000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #300000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #1000000 1'b1;
	PC_expected[1] = #1100000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #300000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #400000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #1000000 1'b1;
	PC_expected[1] = #1100000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #300000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #400000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #1000000 1'b1;
	PC_expected[1] = #1100000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #300000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #400000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #1000000 1'b1;
	PC_expected[1] = #1100000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #300000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #400000 1'b1;
	PC_expected[1] = #600000 1'b0;
	PC_expected[1] = #1000000 1'b1;
	PC_expected[1] = #1100000 1'b0;
	PC_expected[1] = #600000 1'b1;
	PC_expected[1] = #800000 1'b0;
	PC_expected[1] = #700000 1'b1;
	# 1500000;
	repeat(3)
	begin
		PC_expected[1] = 1'b0;
		PC_expected[1] = #500000 1'b1;
		# 800000;
	end
	PC_expected[1] = 1'b0;
	PC_expected[1] = #500000 1'b1;
	PC_expected[1] = #700000 1'b0;
	PC_expected[1] = #500000 1'b1;
	PC_expected[1] = #400000 1'b0;
end 
// expected PC[ 0 ]
initial
begin
	PC_expected[0] = 1'b0;
	PC_expected[0] = #180000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #100000 1'b0;
	PC_expected[0] = #500000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #300000 1'b0;
	PC_expected[0] = #300000 1'b1;
	PC_expected[0] = #800000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #400000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #300000 1'b0;
	PC_expected[0] = #300000 1'b1;
	PC_expected[0] = #800000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #400000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #300000 1'b0;
	PC_expected[0] = #300000 1'b1;
	PC_expected[0] = #800000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #400000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #300000 1'b0;
	PC_expected[0] = #300000 1'b1;
	PC_expected[0] = #800000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #400000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #500000 1'b0;
	PC_expected[0] = #100000 1'b1;
	PC_expected[0] = #300000 1'b0;
	PC_expected[0] = #300000 1'b1;
	PC_expected[0] = #800000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #400000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #600000 1'b0;
	PC_expected[0] = #500000 1'b1;
	PC_expected[0] = #200000 1'b0;
	PC_expected[0] = #200000 1'b1;
	PC_expected[0] = #500000 1'b0;
	# 400000;
	repeat(4)
	begin
		PC_expected[0] = 1'b1;
		PC_expected[0] = #400000 1'b0;
		# 900000;
	end
	PC_expected[0] = 1'b1;
	PC_expected[0] = #300000 1'b0;
	# 300000;
	repeat(2)
	begin
		PC_expected[0] = 1'b1;
		PC_expected[0] = #200000 1'b0;
		# 200000;
	end
	PC_expected[0] = 1'b1;
end 
// expected MBR_OUT[ 7 ]
initial
begin
	MBR_OUT_expected[7] = 1'b0;
	MBR_OUT_expected[7] = #1880000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[7] = 1'b0;
		MBR_OUT_expected[7] = #2700000 1'b1;
		MBR_OUT_expected[7] = #200000 1'b0;
		MBR_OUT_expected[7] = #3200000 1'b1;
		# 400000;
	end
	MBR_OUT_expected[7] = 1'b0;
	MBR_OUT_expected[7] = #2700000 1'b1;
	MBR_OUT_expected[7] = #200000 1'b0;
	MBR_OUT_expected[7] = #1300000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[7] = 1'b0;
		MBR_OUT_expected[7] = #900000 1'b1;
		# 400000;
	end
	MBR_OUT_expected[7] = 1'b0;
end 
// expected MBR_OUT[ 6 ]
initial
begin
	MBR_OUT_expected[6] = 1'b0;
	# 7980000;
	repeat(3)
	begin
		MBR_OUT_expected[6] = 1'b1;
		MBR_OUT_expected[6] = #200000 1'b0;
		# 6300000;
	end
	MBR_OUT_expected[6] = 1'b1;
	MBR_OUT_expected[6] = #200000 1'b0;
	# 5300000;
	repeat(4)
	begin
		MBR_OUT_expected[6] = 1'b1;
		MBR_OUT_expected[6] = #400000 1'b0;
		# 900000;
	end
	MBR_OUT_expected[6] = 1'b1;
	MBR_OUT_expected[6] = #700000 1'b0;
end 
// expected MBR_OUT[ 5 ]
initial
begin
	MBR_OUT_expected[5] = 1'b0;
	MBR_OUT_expected[5] = #1880000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[5] = 1'b0;
		MBR_OUT_expected[5] = #5900000 1'b1;
		# 600000;
	end
	MBR_OUT_expected[5] = 1'b0;
	MBR_OUT_expected[5] = #4200000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[5] = 1'b0;
		MBR_OUT_expected[5] = #500000 1'b1;
		# 800000;
	end
	MBR_OUT_expected[5] = 1'b0;
	MBR_OUT_expected[5] = #900000 1'b1;
	MBR_OUT_expected[5] = #300000 1'b0;
end 
// expected MBR_OUT[ 4 ]
initial
begin
	MBR_OUT_expected[4] = 1'b0;
	# 280000;
	repeat(2)
	begin
		MBR_OUT_expected[4] = 1'b1;
		MBR_OUT_expected[4] = #200000 1'b0;
		# 600000;
	end
	MBR_OUT_expected[4] = 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[4] = 1'b0;
		# 2100000;
		repeat(2)
		begin
			MBR_OUT_expected[4] = 1'b1;
			MBR_OUT_expected[4] = #200000 1'b0;
			MBR_OUT_expected[4] = #400000 1'b1;
			MBR_OUT_expected[4] = #200000 1'b0;
			# 600000;
		end
		repeat(2)
		begin
			MBR_OUT_expected[4] = 1'b1;
			MBR_OUT_expected[4] = #200000 1'b0;
			# 400000;
		end
		MBR_OUT_expected[4] = 1'b1;
		# 400000;
	end
	MBR_OUT_expected[4] = 1'b0;
	MBR_OUT_expected[4] = #2100000 1'b1;
	MBR_OUT_expected[4] = #200000 1'b0;
	MBR_OUT_expected[4] = #400000 1'b1;
	MBR_OUT_expected[4] = #200000 1'b0;
	MBR_OUT_expected[4] = #600000 1'b1;
	MBR_OUT_expected[4] = #500000 1'b0;
	# 1700000;
	repeat(3)
	begin
		MBR_OUT_expected[4] = 1'b1;
		MBR_OUT_expected[4] = #500000 1'b0;
		# 800000;
	end
	MBR_OUT_expected[4] = 1'b1;
	MBR_OUT_expected[4] = #1200000 1'b0;
end 
// expected MBR_OUT[ 3 ]
initial
begin
	MBR_OUT_expected[3] = 1'b0;
	# 4780000;
	repeat(4)
	begin
		MBR_OUT_expected[3] = 1'b1;
		MBR_OUT_expected[3] = #200000 1'b0;
		# 6300000;
	end
	MBR_OUT_expected[3] = 1'b1;
	MBR_OUT_expected[3] = #200000 1'b0;
	MBR_OUT_expected[3] = #1300000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[3] = 1'b0;
		MBR_OUT_expected[3] = #900000 1'b1;
		# 400000;
	end
	MBR_OUT_expected[3] = 1'b0;
	MBR_OUT_expected[3] = #500000 1'b1;
	MBR_OUT_expected[3] = #700000 1'b0;
end 
// expected MBR_OUT[ 2 ]
initial
begin
	MBR_OUT_expected[2] = 1'b0;
	MBR_OUT_expected[2] = #1880000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[2] = 1'b0;
		# 2100000;
		repeat(2)
		begin
			MBR_OUT_expected[2] = 1'b1;
			MBR_OUT_expected[2] = #200000 1'b0;
			# 1200000;
		end
		MBR_OUT_expected[2] = 1'b1;
		MBR_OUT_expected[2] = #200000 1'b0;
		MBR_OUT_expected[2] = #800000 1'b1;
		# 600000;
	end
	MBR_OUT_expected[2] = 1'b0;
	MBR_OUT_expected[2] = #2100000 1'b1;
	MBR_OUT_expected[2] = #200000 1'b0;
	MBR_OUT_expected[2] = #1900000 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[2] = 1'b0;
		MBR_OUT_expected[2] = #900000 1'b1;
		# 400000;
	end
	MBR_OUT_expected[2] = 1'b0;
	MBR_OUT_expected[2] = #900000 1'b1;
	MBR_OUT_expected[2] = #300000 1'b0;
end 
// expected MBR_OUT[ 1 ]
initial
begin
	MBR_OUT_expected[1] = 1'b0;
	# 280000;
	repeat(2)
	begin
		MBR_OUT_expected[1] = 1'b1;
		MBR_OUT_expected[1] = #200000 1'b0;
		# 600000;
	end
	MBR_OUT_expected[1] = 1'b1;
	# 200000;
	repeat(4)
	begin
		MBR_OUT_expected[1] = 1'b0;
		MBR_OUT_expected[1] = #100000 1'b1;
		MBR_OUT_expected[1] = #500000 1'b0;
		MBR_OUT_expected[1] = #100000 1'b1;
		MBR_OUT_expected[1] = #300000 1'b0;
		MBR_OUT_expected[1] = #3100000 1'b1;
		MBR_OUT_expected[1] = #200000 1'b0;
		MBR_OUT_expected[1] = #1800000 1'b1;
		# 400000;
	end
	MBR_OUT_expected[1] = 1'b0;
	MBR_OUT_expected[1] = #100000 1'b1;
	MBR_OUT_expected[1] = #500000 1'b0;
	MBR_OUT_expected[1] = #100000 1'b1;
	MBR_OUT_expected[1] = #300000 1'b0;
	MBR_OUT_expected[1] = #2500000 1'b1;
	MBR_OUT_expected[1] = #300000 1'b0;
	MBR_OUT_expected[1] = #6700000 1'b1;
	MBR_OUT_expected[1] = #300000 1'b0;
end 
// expected MBR_OUT[ 0 ]
initial
begin
	MBR_OUT_expected[0] = 1'b0;
	MBR_OUT_expected[0] = #280000 1'b1;
	MBR_OUT_expected[0] = #200000 1'b0;
	MBR_OUT_expected[0] = #600000 1'b1;
	MBR_OUT_expected[0] = #200000 1'b0;
	MBR_OUT_expected[0] = #100000 1'b1;
	MBR_OUT_expected[0] = #500000 1'b0;
	# 2300000;
	repeat(4)
	begin
		repeat(2)
		begin
			MBR_OUT_expected[0] = 1'b1;
			MBR_OUT_expected[0] = #800000 1'b0;
			# 600000;
		end
		MBR_OUT_expected[0] = 1'b1;
		MBR_OUT_expected[0] = #600000 1'b0;
		MBR_OUT_expected[0] = #200000 1'b1;
		MBR_OUT_expected[0] = #200000 1'b0;
		# 2700000;
	end
	MBR_OUT_expected[0] = 1'b1;
	MBR_OUT_expected[0] = #800000 1'b0;
	MBR_OUT_expected[0] = #7200000 1'b1;
	MBR_OUT_expected[0] = #400000 1'b0;
end 
// expected MIR[ 35 ]
initial
begin
	MIR_expected[35] = 1'b0;
end 
// expected MIR[ 34 ]
initial
begin
	MIR_expected[34] = 1'b0;
	MIR_expected[34] = #2000000 1'b1;
	MIR_expected[34] = #2100000 1'b0;
	MIR_expected[34] = #800000 1'b1;
	MIR_expected[34] = #600000 1'b0;
	MIR_expected[34] = #3000000 1'b1;
	MIR_expected[34] = #2100000 1'b0;
	MIR_expected[34] = #800000 1'b1;
	MIR_expected[34] = #600000 1'b0;
	# 3000000;
	repeat(2)
	begin
		MIR_expected[34] = 1'b1;
		MIR_expected[34] = #2100000 1'b0;
		MIR_expected[34] = #800000 1'b1;
		MIR_expected[34] = #600000 1'b0;
		# 3000000;
	end
	MIR_expected[34] = 1'b1;
	MIR_expected[34] = #2100000 1'b0;
	MIR_expected[34] = #800000 1'b1;
	# 900000;
	repeat(5)
	begin
		MIR_expected[34] = 1'b0;
		MIR_expected[34] = #600000 1'b1;
		# 700000;
	end
	MIR_expected[34] = 1'b0;
end 
// expected MIR[ 33 ]
initial
begin
	MIR_expected[33] = 1'b0;
	MIR_expected[33] = #2900000 1'b1;
	MIR_expected[33] = #1200000 1'b0;
	MIR_expected[33] = #4000000 1'b1;
	MIR_expected[33] = #200000 1'b0;
	MIR_expected[33] = #1100000 1'b1;
	MIR_expected[33] = #1200000 1'b0;
	MIR_expected[33] = #4000000 1'b1;
	MIR_expected[33] = #200000 1'b0;
	# 1100000;
	repeat(2)
	begin
		MIR_expected[33] = 1'b1;
		MIR_expected[33] = #1200000 1'b0;
		MIR_expected[33] = #4000000 1'b1;
		MIR_expected[33] = #200000 1'b0;
		# 1100000;
	end
	MIR_expected[33] = 1'b1;
	MIR_expected[33] = #1200000 1'b0;
	# 3200000;
	repeat(4)
	begin
		MIR_expected[33] = 1'b1;
		MIR_expected[33] = #200000 1'b0;
		# 1100000;
	end
	MIR_expected[33] = 1'b1;
	MIR_expected[33] = #100000 1'b0;
end 
// expected MIR[ 32 ]
initial
begin
	MIR_expected[32] = 1'b0;
	MIR_expected[32] = #2000000 1'b1;
	MIR_expected[32] = #900000 1'b0;
	MIR_expected[32] = #2100000 1'b1;
	MIR_expected[32] = #200000 1'b0;
	MIR_expected[32] = #2900000 1'b1;
	MIR_expected[32] = #200000 1'b0;
	MIR_expected[32] = #200000 1'b1;
	MIR_expected[32] = #900000 1'b0;
	MIR_expected[32] = #2100000 1'b1;
	MIR_expected[32] = #200000 1'b0;
	MIR_expected[32] = #2900000 1'b1;
	MIR_expected[32] = #200000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[32] = 1'b1;
		MIR_expected[32] = #900000 1'b0;
		MIR_expected[32] = #2100000 1'b1;
		MIR_expected[32] = #200000 1'b0;
		MIR_expected[32] = #2900000 1'b1;
		MIR_expected[32] = #200000 1'b0;
		# 200000;
	end
	MIR_expected[32] = 1'b1;
	MIR_expected[32] = #900000 1'b0;
	MIR_expected[32] = #2100000 1'b1;
	MIR_expected[32] = #200000 1'b0;
	MIR_expected[32] = #100000 1'b1;
	MIR_expected[32] = #500000 1'b0;
	# 600000;
	repeat(4)
	begin
		MIR_expected[32] = 1'b1;
		MIR_expected[32] = #700000 1'b0;
		MIR_expected[32] = #200000 1'b1;
		MIR_expected[32] = #200000 1'b0;
		# 200000;
	end
	MIR_expected[32] = 1'b1;
	MIR_expected[32] = #700000 1'b0;
end 
// expected MIR[ 31 ]
initial
begin
	MIR_expected[31] = 1'b0;
	# 400000;
	repeat(2)
	begin
		MIR_expected[31] = 1'b1;
		MIR_expected[31] = #600000 1'b0;
		# 200000;
	end
	MIR_expected[31] = 1'b1;
	MIR_expected[31] = #900000 1'b0;
	MIR_expected[31] = #1400000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
	MIR_expected[31] = #700000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #600000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #200000 1'b0;
	MIR_expected[31] = #600000 1'b1;
	MIR_expected[31] = #900000 1'b0;
	MIR_expected[31] = #1400000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
	MIR_expected[31] = #700000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #600000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #200000 1'b0;
	MIR_expected[31] = #600000 1'b1;
	MIR_expected[31] = #900000 1'b0;
	MIR_expected[31] = #1400000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
	MIR_expected[31] = #700000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #600000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #200000 1'b0;
	MIR_expected[31] = #600000 1'b1;
	MIR_expected[31] = #900000 1'b0;
	MIR_expected[31] = #1400000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
	MIR_expected[31] = #700000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #600000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #200000 1'b0;
	MIR_expected[31] = #600000 1'b1;
	MIR_expected[31] = #900000 1'b0;
	MIR_expected[31] = #1400000 1'b1;
	MIR_expected[31] = #400000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
	MIR_expected[31] = #1000000 1'b1;
	MIR_expected[31] = #200000 1'b0;
	# 400000;
	repeat(4)
	begin
		MIR_expected[31] = 1'b1;
		MIR_expected[31] = #500000 1'b0;
		# 800000;
	end
	MIR_expected[31] = 1'b1;
	MIR_expected[31] = #500000 1'b0;
	MIR_expected[31] = #200000 1'b1;
	MIR_expected[31] = #100000 1'b0;
end 
// expected MIR[ 30 ]
initial
begin
	MIR_expected[30] = 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[30] = 1'b1;
		MIR_expected[30] = #200000 1'b0;
		MIR_expected[30] = #100000 1'b1;
		MIR_expected[30] = #200000 1'b0;
		# 300000;
	end
	MIR_expected[30] = 1'b1;
	MIR_expected[30] = #800000 1'b0;
	MIR_expected[30] = #600000 1'b1;
	MIR_expected[30] = #600000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #100000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #300000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #300000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #100000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #1100000 1'b1;
	MIR_expected[30] = #800000 1'b0;
	MIR_expected[30] = #600000 1'b1;
	MIR_expected[30] = #600000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #100000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #300000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #300000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #100000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #1100000 1'b1;
	MIR_expected[30] = #800000 1'b0;
	MIR_expected[30] = #600000 1'b1;
	MIR_expected[30] = #600000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #100000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #300000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #300000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #100000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #1100000 1'b1;
	MIR_expected[30] = #800000 1'b0;
	MIR_expected[30] = #600000 1'b1;
	MIR_expected[30] = #600000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #100000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #300000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #300000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #100000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #1100000 1'b1;
	MIR_expected[30] = #800000 1'b0;
	MIR_expected[30] = #600000 1'b1;
	MIR_expected[30] = #600000 1'b0;
	MIR_expected[30] = #400000 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #100000 1'b0;
	MIR_expected[30] = #200000 1'b1;
	MIR_expected[30] = #600000 1'b0;
	# 600000;
	repeat(4)
	begin
		MIR_expected[30] = 1'b1;
		MIR_expected[30] = #200000 1'b0;
		# 1100000;
	end
	MIR_expected[30] = 1'b1;
	MIR_expected[30] = #200000 1'b0;
	MIR_expected[30] = #700000 1'b1;
	MIR_expected[30] = #100000 1'b0;
end 
// expected MIR[ 29 ]
initial
begin
	repeat(2)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		MIR_expected[29] = #100000 1'b0;
		MIR_expected[29] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		# 200000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #500000 1'b1;
	MIR_expected[29] = #500000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #800000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		# 200000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #500000 1'b1;
	MIR_expected[29] = #500000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #800000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		# 200000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #500000 1'b1;
	MIR_expected[29] = #500000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #800000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		# 200000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #500000 1'b1;
	MIR_expected[29] = #500000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #800000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #100000 1'b0;
	MIR_expected[29] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		# 200000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #200000 1'b1;
	MIR_expected[29] = #200000 1'b0;
	MIR_expected[29] = #500000 1'b1;
	# 300000;
	repeat(5)
	begin
		MIR_expected[29] = 1'b0;
		MIR_expected[29] = #400000 1'b1;
		MIR_expected[29] = #100000 1'b0;
		MIR_expected[29] = #600000 1'b1;
		# 200000;
	end
	MIR_expected[29] = 1'b0;
	MIR_expected[29] = #400000 1'b1;
	MIR_expected[29] = #100000 1'b0;
end 
// expected MIR[ 28 ]
initial
begin
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #300000 1'b0;
		# 200000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #300000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #200000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b0;
		MIR_expected[28] = #200000 1'b1;
		# 200000;
	end
	MIR_expected[28] = 1'b0;
	MIR_expected[28] = #200000 1'b1;
	MIR_expected[28] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	# 300000;
	repeat(5)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #100000 1'b1;
		MIR_expected[28] = #100000 1'b0;
		MIR_expected[28] = #200000 1'b1;
		MIR_expected[28] = #200000 1'b0;
		MIR_expected[28] = #100000 1'b1;
		MIR_expected[28] = #200000 1'b0;
		# 200000;
	end
	MIR_expected[28] = 1'b1;
	MIR_expected[28] = #200000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #100000 1'b0;
	MIR_expected[28] = #100000 1'b1;
	MIR_expected[28] = #200000 1'b0;
	# 200000;
	repeat(5)
	begin
		MIR_expected[28] = 1'b1;
		MIR_expected[28] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[28] = 1'b1;
end 
// expected MIR[ 27 ]
initial
begin
	MIR_expected[27] = 1'b0;
	MIR_expected[27] = #600000 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #400000 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 200000;
	repeat(10)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		MIR_expected[27] = #300000 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #400000 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #200000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 100000;
	repeat(9)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		MIR_expected[27] = #300000 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #400000 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 300000;
	end
	repeat(10)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		MIR_expected[27] = #300000 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #400000 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 300000;
	end
	repeat(10)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		MIR_expected[27] = #300000 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #400000 1'b1;
	MIR_expected[27] = #200000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #300000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	MIR_expected[27] = #100000 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 300000;
	end
	repeat(10)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		MIR_expected[27] = #300000 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #200000 1'b0;
	# 200000;
	repeat(4)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 400000;
		repeat(2)
		begin
			MIR_expected[27] = 1'b1;
			MIR_expected[27] = #100000 1'b0;
			# 100000;
		end
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
	# 400000;
	repeat(2)
	begin
		MIR_expected[27] = 1'b1;
		MIR_expected[27] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[27] = 1'b1;
	MIR_expected[27] = #100000 1'b0;
end 
// expected MIR[ 26 ]
initial
begin
	repeat(2)
	begin
		MIR_expected[26] = 1'b0;
		MIR_expected[26] = #100000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[26] = 1'b0;
		MIR_expected[26] = #700000 1'b1;
		# 100000;
	end
	MIR_expected[26] = 1'b0;
	# 2200000;
	repeat(2)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		MIR_expected[26] = #500000 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 700000;
	end
	MIR_expected[26] = 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #500000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #300000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #300000 1'b1;
	# 100000;
	repeat(3)
	begin
		MIR_expected[26] = 1'b0;
		# 2200000;
		repeat(2)
		begin
			MIR_expected[26] = 1'b1;
			MIR_expected[26] = #100000 1'b0;
			MIR_expected[26] = #500000 1'b1;
			MIR_expected[26] = #100000 1'b0;
			# 700000;
		end
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 500000;
		repeat(2)
		begin
			MIR_expected[26] = 1'b1;
			MIR_expected[26] = #100000 1'b0;
			# 300000;
		end
		MIR_expected[26] = 1'b1;
		# 100000;
	end
	MIR_expected[26] = 1'b0;
	MIR_expected[26] = #2200000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	MIR_expected[26] = #500000 1'b1;
	MIR_expected[26] = #100000 1'b0;
	# 1000000;
	repeat(5)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		MIR_expected[26] = #300000 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 800000;
	end
	repeat(2)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 200000;
	end
	repeat(5)
	begin
		MIR_expected[26] = 1'b1;
		MIR_expected[26] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 25 ]
initial
begin
	MIR_expected[25] = 1'b0;
end 
// expected MIR[ 24 ]
initial
begin
	MIR_expected[24] = 1'b0;
	MIR_expected[24] = #5200000 1'b1;
	MIR_expected[24] = #100000 1'b0;
	MIR_expected[24] = #6400000 1'b1;
	MIR_expected[24] = #100000 1'b0;
	# 6400000;
	repeat(2)
	begin
		MIR_expected[24] = 1'b1;
		MIR_expected[24] = #100000 1'b0;
		# 6400000;
	end
	MIR_expected[24] = 1'b1;
	MIR_expected[24] = #100000 1'b0;
end 
// expected MIR[ 23 ]
initial
begin
	MIR_expected[23] = 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[23] = 1'b1;
		MIR_expected[23] = #100000 1'b0;
		# 700000;
	end
	repeat(2)
	begin
		MIR_expected[23] = 1'b1;
		MIR_expected[23] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[23] = 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #3000000 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #2100000 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #500000 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #500000 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #3000000 1'b1;
	MIR_expected[23] = #100000 1'b0;
	# 2100000;
	repeat(2)
	begin
		repeat(2)
		begin
			MIR_expected[23] = 1'b1;
			MIR_expected[23] = #100000 1'b0;
			# 500000;
		end
		MIR_expected[23] = 1'b1;
		MIR_expected[23] = #100000 1'b0;
		MIR_expected[23] = #3000000 1'b1;
		MIR_expected[23] = #100000 1'b0;
		# 2100000;
	end
	repeat(2)
	begin
		MIR_expected[23] = 1'b1;
		MIR_expected[23] = #100000 1'b0;
		# 500000;
	end
	MIR_expected[23] = 1'b1;
	MIR_expected[23] = #100000 1'b0;
	MIR_expected[23] = #2100000 1'b1;
	MIR_expected[23] = #100000 1'b0;
end 
// expected MIR[ 22 ]
initial
begin
	MIR_expected[22] = 1'b0;
end 
// expected MIR[ 21 ]
initial
begin
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		MIR_expected[21] = #200000 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 300000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 300000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 300000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 300000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 300000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #200000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #300000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	# 100000;
	repeat(4)
	begin
		MIR_expected[21] = 1'b0;
		MIR_expected[21] = #300000 1'b1;
		MIR_expected[21] = #100000 1'b0;
		MIR_expected[21] = #400000 1'b1;
		MIR_expected[21] = #200000 1'b0;
		MIR_expected[21] = #100000 1'b1;
		# 200000;
	end
	MIR_expected[21] = 1'b0;
	MIR_expected[21] = #300000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	MIR_expected[21] = #400000 1'b1;
	MIR_expected[21] = #200000 1'b0;
	MIR_expected[21] = #100000 1'b1;
	MIR_expected[21] = #100000 1'b0;
	# 200000;
	repeat(5)
	begin
		MIR_expected[21] = 1'b1;
		MIR_expected[21] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 20 ]
initial
begin
	MIR_expected[20] = 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #100000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #5200000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #6400000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #6400000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #6400000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #6700000 1'b0;
	MIR_expected[20] = #100000 1'b1;
	# 600000;
	repeat(4)
	begin
		MIR_expected[20] = 1'b0;
		MIR_expected[20] = #100000 1'b1;
		# 1200000;
	end
	MIR_expected[20] = 1'b0;
	MIR_expected[20] = #100000 1'b1;
	MIR_expected[20] = #1000000 1'b0;
	# 200000;
	repeat(5)
	begin
		MIR_expected[20] = 1'b1;
		MIR_expected[20] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 19 ]
initial
begin
	repeat(3)
	begin
		MIR_expected[19] = 1'b0;
		MIR_expected[19] = #600000 1'b1;
		# 200000;
	end
	MIR_expected[19] = 1'b0;
	MIR_expected[19] = #400000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #100000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #800000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1300000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #600000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #500000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1000000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #400000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #100000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #800000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1300000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #600000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #500000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1000000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #400000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #100000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #800000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1300000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #600000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #500000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1000000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #400000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #100000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #800000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1300000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #600000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #500000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1000000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #400000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #100000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #300000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	MIR_expected[19] = #800000 1'b1;
	MIR_expected[19] = #100000 1'b0;
	MIR_expected[19] = #1100000 1'b1;
	MIR_expected[19] = #200000 1'b0;
	# 1700000;
	repeat(3)
	begin
		MIR_expected[19] = 1'b1;
		MIR_expected[19] = #100000 1'b0;
		# 1200000;
	end
	MIR_expected[19] = 1'b1;
	MIR_expected[19] = #100000 1'b0;
end 
// expected MIR[ 18 ]
initial
begin
	MIR_expected[18] = 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #100000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #5200000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #6400000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #6400000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #6400000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #6700000 1'b0;
	MIR_expected[18] = #100000 1'b1;
	# 600000;
	repeat(4)
	begin
		MIR_expected[18] = 1'b0;
		MIR_expected[18] = #100000 1'b1;
		# 1200000;
	end
	MIR_expected[18] = 1'b0;
	MIR_expected[18] = #100000 1'b1;
	MIR_expected[18] = #1000000 1'b0;
	# 200000;
	repeat(5)
	begin
		MIR_expected[18] = 1'b1;
		MIR_expected[18] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 17 ]
initial
begin
	MIR_expected[17] = 1'b0;
	MIR_expected[17] = #3000000 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #1800000 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #3100000 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #100000 1'b1;
	MIR_expected[17] = #100000 1'b0;
	# 1100000;
	repeat(3)
	begin
		MIR_expected[17] = 1'b1;
		MIR_expected[17] = #100000 1'b0;
		MIR_expected[17] = #1800000 1'b1;
		MIR_expected[17] = #100000 1'b0;
		MIR_expected[17] = #3100000 1'b1;
		MIR_expected[17] = #100000 1'b0;
		MIR_expected[17] = #100000 1'b1;
		MIR_expected[17] = #100000 1'b0;
		# 1100000;
	end
	MIR_expected[17] = 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #1800000 1'b1;
	MIR_expected[17] = #100000 1'b0;
	MIR_expected[17] = #300000 1'b1;
	MIR_expected[17] = #100000 1'b0;
	# 1900000;
	repeat(3)
	begin
		MIR_expected[17] = 1'b1;
		MIR_expected[17] = #100000 1'b0;
		# 1200000;
	end
	MIR_expected[17] = 1'b1;
	MIR_expected[17] = #100000 1'b0;
end 
// expected MIR[ 16 ]
initial
begin
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		MIR_expected[16] = #200000 1'b0;
		MIR_expected[16] = #300000 1'b1;
		# 200000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #300000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #200000 1'b1;
		# 100000;
	end
	repeat(2)
	begin
		MIR_expected[16] = 1'b0;
		MIR_expected[16] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[16] = 1'b0;
	MIR_expected[16] = #200000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #500000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #300000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	# 300000;
	repeat(4)
	begin
		MIR_expected[16] = 1'b1;
		MIR_expected[16] = #100000 1'b0;
		# 400000;
		repeat(2)
		begin
			MIR_expected[16] = 1'b1;
			MIR_expected[16] = #100000 1'b0;
			# 300000;
		end
	end
	MIR_expected[16] = 1'b1;
	MIR_expected[16] = #100000 1'b0;
	MIR_expected[16] = #400000 1'b1;
	MIR_expected[16] = #200000 1'b0;
	MIR_expected[16] = #100000 1'b1;
	MIR_expected[16] = #100000 1'b0;
	# 200000;
	repeat(5)
	begin
		MIR_expected[16] = 1'b1;
		MIR_expected[16] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 15 ]
initial
begin
	MIR_expected[15] = 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[15] = 1'b1;
		MIR_expected[15] = #200000 1'b0;
		# 600000;
	end
	repeat(2)
	begin
		MIR_expected[15] = 1'b1;
		MIR_expected[15] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[15] = 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #800000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1300000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #600000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #500000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1000000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #300000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #400000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #400000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #800000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1300000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #600000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #500000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1000000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	# 300000;
	repeat(2)
	begin
		MIR_expected[15] = 1'b1;
		MIR_expected[15] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[15] = 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #800000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1300000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #600000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #500000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1000000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	# 300000;
	repeat(2)
	begin
		MIR_expected[15] = 1'b1;
		MIR_expected[15] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[15] = 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #800000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1300000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #600000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #500000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1000000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	# 300000;
	repeat(2)
	begin
		MIR_expected[15] = 1'b1;
		MIR_expected[15] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[15] = 1'b1;
	MIR_expected[15] = #200000 1'b0;
	MIR_expected[15] = #800000 1'b1;
	MIR_expected[15] = #100000 1'b0;
	MIR_expected[15] = #1100000 1'b1;
	MIR_expected[15] = #200000 1'b0;
	# 1700000;
	repeat(3)
	begin
		MIR_expected[15] = 1'b1;
		MIR_expected[15] = #100000 1'b0;
		# 1200000;
	end
	MIR_expected[15] = 1'b1;
	MIR_expected[15] = #100000 1'b0;
end 
// expected MIR[ 14 ]
initial
begin
	MIR_expected[14] = 1'b0;
	MIR_expected[14] = #2400000 1'b1;
	MIR_expected[14] = #100000 1'b0;
	MIR_expected[14] = #2500000 1'b1;
	MIR_expected[14] = #100000 1'b0;
	MIR_expected[14] = #3800000 1'b1;
	MIR_expected[14] = #100000 1'b0;
	MIR_expected[14] = #2500000 1'b1;
	MIR_expected[14] = #100000 1'b0;
	# 3800000;
	repeat(2)
	begin
		MIR_expected[14] = 1'b1;
		MIR_expected[14] = #100000 1'b0;
		MIR_expected[14] = #2500000 1'b1;
		MIR_expected[14] = #100000 1'b0;
		# 3800000;
	end
	MIR_expected[14] = 1'b1;
	MIR_expected[14] = #100000 1'b0;
	MIR_expected[14] = #2500000 1'b1;
	MIR_expected[14] = #100000 1'b0;
	MIR_expected[14] = #200000 1'b1;
	MIR_expected[14] = #100000 1'b0;
end 
// expected MIR[ 13 ]
initial
begin
	MIR_expected[13] = 1'b0;
	MIR_expected[13] = #1000000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #700000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #1100000 1'b1;
	MIR_expected[13] = #200000 1'b0;
	MIR_expected[13] = #1500000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #900000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #700000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #500000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #1100000 1'b1;
	MIR_expected[13] = #200000 1'b0;
	MIR_expected[13] = #1500000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #900000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #700000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[13] = 1'b1;
		MIR_expected[13] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[13] = 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #1100000 1'b1;
	MIR_expected[13] = #200000 1'b0;
	MIR_expected[13] = #1500000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #900000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #700000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[13] = 1'b1;
		MIR_expected[13] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[13] = 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #1100000 1'b1;
	MIR_expected[13] = #200000 1'b0;
	MIR_expected[13] = #1500000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #900000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #700000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[13] = 1'b1;
		MIR_expected[13] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[13] = 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #1100000 1'b1;
	MIR_expected[13] = #200000 1'b0;
	MIR_expected[13] = #1500000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	MIR_expected[13] = #300000 1'b1;
	MIR_expected[13] = #100000 1'b0;
	# 1000000;
	repeat(4)
	begin
		MIR_expected[13] = 1'b1;
		MIR_expected[13] = #100000 1'b0;
		# 1200000;
	end
	MIR_expected[13] = 1'b1;
	MIR_expected[13] = #100000 1'b0;
end 
// expected MIR[ 12 ]
initial
begin
	MIR_expected[12] = 1'b0;
end 
// expected MIR[ 11 ]
initial
begin
	MIR_expected[11] = 1'b0;
	MIR_expected[11] = #4100000 1'b1;
	MIR_expected[11] = #100000 1'b0;
	MIR_expected[11] = #6400000 1'b1;
	MIR_expected[11] = #100000 1'b0;
	# 6400000;
	repeat(2)
	begin
		MIR_expected[11] = 1'b1;
		MIR_expected[11] = #100000 1'b0;
		# 6400000;
	end
	MIR_expected[11] = 1'b1;
	MIR_expected[11] = #100000 1'b0;
	# 2400000;
	repeat(4)
	begin
		MIR_expected[11] = 1'b1;
		MIR_expected[11] = #100000 1'b0;
		MIR_expected[11] = #300000 1'b1;
		MIR_expected[11] = #100000 1'b0;
		# 800000;
	end
	MIR_expected[11] = 1'b1;
	MIR_expected[11] = #100000 1'b0;
	MIR_expected[11] = #300000 1'b1;
	MIR_expected[11] = #100000 1'b0;
end 
// expected MIR[ 10 ]
initial
begin
	MIR_expected[10] = 1'b0;
	MIR_expected[10] = #800000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #700000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #1900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #100000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #600000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #700000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #500000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #1900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #100000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #600000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #700000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[10] = 1'b1;
		MIR_expected[10] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[10] = 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #1900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #100000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #600000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #700000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[10] = 1'b1;
		MIR_expected[10] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[10] = 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #1900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #100000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #600000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #700000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	# 500000;
	repeat(2)
	begin
		MIR_expected[10] = 1'b1;
		MIR_expected[10] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[10] = 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #1900000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #100000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #600000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	MIR_expected[10] = #300000 1'b1;
	MIR_expected[10] = #100000 1'b0;
	# 1000000;
	repeat(5)
	begin
		MIR_expected[10] = 1'b1;
		MIR_expected[10] = #100000 1'b0;
		MIR_expected[10] = #300000 1'b1;
		MIR_expected[10] = #100000 1'b0;
		# 800000;
	end
	MIR_expected[10] = 1'b1;
	MIR_expected[10] = #100000 1'b0;
end 
// expected MIR[ 9 ]
initial
begin
	MIR_expected[9] = 1'b0;
	# 100000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		MIR_expected[9] = #100000 1'b1;
		MIR_expected[9] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[9] = 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b0;
		MIR_expected[9] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[9] = 1'b0;
	MIR_expected[9] = #700000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b0;
		MIR_expected[9] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[9] = 1'b0;
	MIR_expected[9] = #700000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b0;
		MIR_expected[9] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[9] = 1'b0;
	MIR_expected[9] = #700000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b0;
		MIR_expected[9] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[9] = 1'b0;
	MIR_expected[9] = #700000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #200000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b0;
		MIR_expected[9] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[9] = 1'b0;
	MIR_expected[9] = #700000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #300000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #100000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #500000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 200000;
	repeat(3)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
	repeat(4)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 400000;
		repeat(2)
		begin
			MIR_expected[9] = 1'b1;
			MIR_expected[9] = #100000 1'b0;
			# 300000;
		end
	end
	MIR_expected[9] = 1'b1;
	MIR_expected[9] = #100000 1'b0;
	MIR_expected[9] = #400000 1'b1;
	MIR_expected[9] = #100000 1'b0;
	# 300000;
	repeat(2)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 200000;
	end
	repeat(5)
	begin
		MIR_expected[9] = 1'b1;
		MIR_expected[9] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 8 ]
initial
begin
	MIR_expected[8] = 1'b0;
	# 3500000;
	repeat(2)
	begin
		MIR_expected[8] = 1'b1;
		MIR_expected[8] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[8] = 1'b1;
	MIR_expected[8] = #100000 1'b0;
	MIR_expected[8] = #3900000 1'b1;
	MIR_expected[8] = #100000 1'b0;
	MIR_expected[8] = #300000 1'b1;
	MIR_expected[8] = #100000 1'b0;
	# 1600000;
	repeat(3)
	begin
		repeat(2)
		begin
			MIR_expected[8] = 1'b1;
			MIR_expected[8] = #100000 1'b0;
			# 100000;
		end
		MIR_expected[8] = 1'b1;
		MIR_expected[8] = #100000 1'b0;
		MIR_expected[8] = #3900000 1'b1;
		MIR_expected[8] = #100000 1'b0;
		MIR_expected[8] = #300000 1'b1;
		MIR_expected[8] = #100000 1'b0;
		# 1600000;
	end
	repeat(2)
	begin
		MIR_expected[8] = 1'b1;
		MIR_expected[8] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[8] = 1'b1;
	MIR_expected[8] = #100000 1'b0;
	# 2200000;
	repeat(4)
	begin
		MIR_expected[8] = 1'b1;
		MIR_expected[8] = #100000 1'b0;
		MIR_expected[8] = #800000 1'b1;
		MIR_expected[8] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[8] = 1'b1;
	MIR_expected[8] = #100000 1'b0;
	MIR_expected[8] = #800000 1'b1;
	MIR_expected[8] = #100000 1'b0;
	MIR_expected[8] = #200000 1'b1;
	MIR_expected[8] = #100000 1'b0;
end 
// expected MIR[ 7 ]
initial
begin
	MIR_expected[7] = 1'b0;
	# 700000;
	repeat(2)
	begin
		MIR_expected[7] = 1'b1;
		MIR_expected[7] = #200000 1'b0;
		# 600000;
	end
	MIR_expected[7] = 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #700000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #500000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #800000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #700000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #500000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #800000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[7] = 1'b0;
		MIR_expected[7] = #300000 1'b1;
		# 100000;
	end
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #700000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #500000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #800000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[7] = 1'b0;
		MIR_expected[7] = #300000 1'b1;
		# 100000;
	end
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #700000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #500000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #800000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[7] = 1'b0;
		MIR_expected[7] = #300000 1'b1;
		# 100000;
	end
	MIR_expected[7] = 1'b0;
	MIR_expected[7] = #600000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #700000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #400000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #500000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #1000000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	# 300000;
	repeat(4)
	begin
		MIR_expected[7] = 1'b1;
		MIR_expected[7] = #100000 1'b0;
		MIR_expected[7] = #100000 1'b1;
		MIR_expected[7] = #200000 1'b0;
		# 100000;
		repeat(2)
		begin
			MIR_expected[7] = 1'b1;
			MIR_expected[7] = #100000 1'b0;
			# 300000;
		end
	end
	MIR_expected[7] = 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #200000 1'b0;
	MIR_expected[7] = #100000 1'b1;
	MIR_expected[7] = #100000 1'b0;
	MIR_expected[7] = #300000 1'b1;
	MIR_expected[7] = #100000 1'b0;
end 
// expected MIR[ 6 ]
initial
begin
	MIR_expected[6] = 1'b0;
	MIR_expected[6] = #900000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #700000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 1700000;
	repeat(2)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #600000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #1300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #700000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #500000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #400000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #600000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #1300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #700000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #500000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #400000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #600000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #1300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #700000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #500000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #400000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #600000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #1300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #700000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #500000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #400000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #300000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 1600000;
	repeat(2)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #600000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	# 1500000;
	repeat(4)
	begin
		MIR_expected[6] = 1'b1;
		MIR_expected[6] = #100000 1'b0;
		MIR_expected[6] = #800000 1'b1;
		MIR_expected[6] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[6] = 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #800000 1'b1;
	MIR_expected[6] = #100000 1'b0;
	MIR_expected[6] = #200000 1'b1;
	MIR_expected[6] = #100000 1'b0;
end 
// expected MIR[ 5 ]
initial
begin
	repeat(3)
	begin
		MIR_expected[5] = 1'b0;
		MIR_expected[5] = #700000 1'b1;
		# 100000;
	end
	MIR_expected[5] = 1'b0;
	MIR_expected[5] = #2000000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #400000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #700000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #500000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #600000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #2000000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #400000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #700000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #500000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #600000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #2000000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #400000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #700000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #500000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #600000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #2000000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #400000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #700000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #500000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #800000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #600000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #2000000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	MIR_expected[5] = #400000 1'b1;
	MIR_expected[5] = #100000 1'b0;
	# 1400000;
	repeat(4)
	begin
		repeat(2)
		begin
			MIR_expected[5] = 1'b1;
			MIR_expected[5] = #100000 1'b0;
			# 100000;
		end
		MIR_expected[5] = 1'b1;
		MIR_expected[5] = #100000 1'b0;
		MIR_expected[5] = #400000 1'b1;
		MIR_expected[5] = #100000 1'b0;
		# 300000;
	end
	repeat(2)
	begin
		MIR_expected[5] = 1'b1;
		MIR_expected[5] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[5] = 1'b1;
	MIR_expected[5] = #100000 1'b0;
end 
// expected MIR[ 4 ]
initial
begin
	MIR_expected[4] = 1'b0;
	# 100000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		MIR_expected[4] = #100000 1'b1;
		MIR_expected[4] = #200000 1'b0;
		# 400000;
	end
	MIR_expected[4] = 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b0;
		MIR_expected[4] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[4] = 1'b0;
	MIR_expected[4] = #700000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #500000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b0;
		MIR_expected[4] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[4] = 1'b0;
	MIR_expected[4] = #700000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #500000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b0;
		MIR_expected[4] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[4] = 1'b0;
	MIR_expected[4] = #700000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #500000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b0;
		MIR_expected[4] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[4] = 1'b0;
	MIR_expected[4] = #700000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #500000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 300000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #200000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	# 200000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b0;
		MIR_expected[4] = #200000 1'b1;
		# 100000;
	end
	MIR_expected[4] = 1'b0;
	MIR_expected[4] = #700000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #300000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #100000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #500000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 200000;
	repeat(3)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
	repeat(4)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 400000;
		repeat(2)
		begin
			MIR_expected[4] = 1'b1;
			MIR_expected[4] = #100000 1'b0;
			# 300000;
		end
	end
	MIR_expected[4] = 1'b1;
	MIR_expected[4] = #100000 1'b0;
	MIR_expected[4] = #400000 1'b1;
	MIR_expected[4] = #100000 1'b0;
	# 300000;
	repeat(2)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 200000;
	end
	repeat(5)
	begin
		MIR_expected[4] = 1'b1;
		MIR_expected[4] = #100000 1'b0;
		# 100000;
	end
end 
// expected MIR[ 3 ]
initial
begin
	MIR_expected[3] = 1'b0;
	MIR_expected[3] = #3700000 1'b1;
	MIR_expected[3] = #100000 1'b0;
	MIR_expected[3] = #1400000 1'b1;
	MIR_expected[3] = #100000 1'b0;
	MIR_expected[3] = #4900000 1'b1;
	MIR_expected[3] = #100000 1'b0;
	MIR_expected[3] = #1400000 1'b1;
	MIR_expected[3] = #100000 1'b0;
	# 4900000;
	repeat(2)
	begin
		MIR_expected[3] = 1'b1;
		MIR_expected[3] = #100000 1'b0;
		MIR_expected[3] = #1400000 1'b1;
		MIR_expected[3] = #100000 1'b0;
		# 4900000;
	end
	MIR_expected[3] = 1'b1;
	MIR_expected[3] = #100000 1'b0;
	MIR_expected[3] = #1400000 1'b1;
	MIR_expected[3] = #100000 1'b0;
	MIR_expected[3] = #400000 1'b1;
	MIR_expected[3] = #100000 1'b0;
end 
// expected MIR[ 2 ]
initial
begin
	MIR_expected[2] = 1'b0;
	# 700000;
	repeat(2)
	begin
		MIR_expected[2] = 1'b1;
		MIR_expected[2] = #200000 1'b0;
		# 600000;
	end
	MIR_expected[2] = 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MIR_expected[2] = 1'b0;
		MIR_expected[2] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #100000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #100000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #500000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MIR_expected[2] = 1'b0;
		MIR_expected[2] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #100000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[2] = 1'b1;
		MIR_expected[2] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[2] = 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #500000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MIR_expected[2] = 1'b0;
		MIR_expected[2] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #100000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[2] = 1'b1;
		MIR_expected[2] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[2] = 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #500000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MIR_expected[2] = 1'b0;
		MIR_expected[2] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #100000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[2] = 1'b1;
		MIR_expected[2] = #100000 1'b0;
		# 300000;
	end
	MIR_expected[2] = 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #500000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #600000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #200000 1'b1;
	# 200000;
	repeat(3)
	begin
		MIR_expected[2] = 1'b0;
		MIR_expected[2] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[2] = 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #200000 1'b0;
	MIR_expected[2] = #900000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	MIR_expected[2] = #300000 1'b1;
	MIR_expected[2] = #100000 1'b0;
	# 200000;
	repeat(3)
	begin
		MIR_expected[2] = 1'b1;
		MIR_expected[2] = #100000 1'b0;
		# 100000;
	end
	repeat(4)
	begin
		MIR_expected[2] = 1'b1;
		# 200000;
		repeat(2)
		begin
			MIR_expected[2] = 1'b0;
			MIR_expected[2] = #200000 1'b1;
			# 100000;
		end
		repeat(2)
		begin
			MIR_expected[2] = 1'b0;
			MIR_expected[2] = #100000 1'b1;
			# 100000;
		end
		MIR_expected[2] = 1'b0;
		# 100000;
	end
	MIR_expected[2] = 1'b1;
	MIR_expected[2] = #200000 1'b0;
end 
// expected MIR[ 1 ]
initial
begin
	repeat(3)
	begin
		MIR_expected[1] = 1'b0;
		MIR_expected[1] = #500000 1'b1;
		# 300000;
	end
	MIR_expected[1] = 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #100000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #700000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #100000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #700000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #100000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #700000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #100000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #700000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #300000 1'b0;
	MIR_expected[1] = #300000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #100000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #600000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #400000 1'b1;
	MIR_expected[1] = #200000 1'b0;
	MIR_expected[1] = #500000 1'b1;
	MIR_expected[1] = #100000 1'b0;
	# 800000;
	repeat(4)
	begin
		MIR_expected[1] = 1'b1;
		MIR_expected[1] = #100000 1'b0;
		MIR_expected[1] = #200000 1'b1;
		MIR_expected[1] = #100000 1'b0;
		# 900000;
	end
	MIR_expected[1] = 1'b1;
	MIR_expected[1] = #100000 1'b0;
	MIR_expected[1] = #200000 1'b1;
	MIR_expected[1] = #100000 1'b0;
end 
// expected MIR[ 0 ]
initial
begin
	MIR_expected[0] = 1'b0;
	# 100000;
	repeat(2)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		MIR_expected[0] = #100000 1'b1;
		MIR_expected[0] = #400000 1'b0;
		# 200000;
	end
	repeat(2)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		MIR_expected[0] = #100000 1'b1;
		MIR_expected[0] = #400000 1'b0;
		# 100000;
	end
	MIR_expected[0] = 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #400000 1'b1;
	# 600000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #300000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 300000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 400000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #400000 1'b1;
	# 600000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #300000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 300000;
	repeat(5)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 400000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #400000 1'b1;
	# 600000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #300000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 300000;
	repeat(5)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 400000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #400000 1'b1;
	# 600000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #300000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 300000;
	repeat(5)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #400000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	# 100000;
	repeat(2)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 400000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #400000 1'b1;
	# 600000;
	repeat(3)
	begin
		MIR_expected[0] = 1'b0;
		MIR_expected[0] = #100000 1'b1;
		# 100000;
	end
	MIR_expected[0] = 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	# 200000;
	repeat(2)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		# 100000;
	end
	repeat(4)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #200000 1'b0;
		MIR_expected[0] = #200000 1'b1;
		MIR_expected[0] = #100000 1'b0;
		MIR_expected[0] = #300000 1'b1;
		MIR_expected[0] = #200000 1'b0;
		MIR_expected[0] = #100000 1'b1;
		MIR_expected[0] = #100000 1'b0;
		# 100000;
	end
	MIR_expected[0] = 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #200000 1'b1;
	MIR_expected[0] = #100000 1'b0;
	MIR_expected[0] = #300000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	MIR_expected[0] = #100000 1'b1;
	MIR_expected[0] = #200000 1'b0;
	# 200000;
	repeat(5)
	begin
		MIR_expected[0] = 1'b1;
		MIR_expected[0] = #100000 1'b0;
		# 100000;
	end
end 
// expected MPC[ 8 ]
initial
begin
	MPC_expected[8] = 1'b0;
	MPC_expected[8] = #31280000 1'b1;
	MPC_expected[8] = #20000 1'b0;
end 
// expected MPC[ 7 ]
initial
begin
	MPC_expected[7] = 1'b0;
	MPC_expected[7] = #1980000 1'b1;
	# 2120000;
	repeat(4)
	begin
		MPC_expected[7] = 1'b0;
		MPC_expected[7] = #780000 1'b1;
		MPC_expected[7] = #620000 1'b0;
		MPC_expected[7] = #2900000 1'b1;
		# 2200000;
	end
	MPC_expected[7] = 1'b0;
	MPC_expected[7] = #780000 1'b1;
	MPC_expected[7] = #920000 1'b0;
	MPC_expected[7] = #580000 1'b1;
	# 720000;
	repeat(4)
	begin
		MPC_expected[7] = 1'b0;
		MPC_expected[7] = #500000 1'b1;
		# 800000;
	end
	MPC_expected[7] = 1'b0;
end 
// expected MPC[ 6 ]
initial
begin
	MPC_expected[6] = 1'b0;
	# 2900000;
	repeat(4)
	begin
		MPC_expected[6] = 1'b1;
		MPC_expected[6] = #1200000 1'b0;
		MPC_expected[6] = #3980000 1'b1;
		MPC_expected[6] = #220000 1'b0;
		# 1100000;
	end
	MPC_expected[6] = 1'b1;
	MPC_expected[6] = #1200000 1'b0;
	# 3100000;
	repeat(4)
	begin
		MPC_expected[6] = 1'b1;
		MPC_expected[6] = #300000 1'b0;
		# 1000000;
	end
	MPC_expected[6] = 1'b1;
	MPC_expected[6] = #200000 1'b0;
	MPC_expected[6] = #100000 1'b1;
	MPC_expected[6] = #100000 1'b0;
end 
// expected MPC[ 5 ]
initial
begin
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #1980000 1'b1;
	# 920000;
	repeat(4)
	begin
		MPC_expected[5] = 1'b0;
		MPC_expected[5] = #2100000 1'b1;
		MPC_expected[5] = #200000 1'b0;
		MPC_expected[5] = #2880000 1'b1;
		MPC_expected[5] = #220000 1'b0;
		MPC_expected[5] = #100000 1'b1;
		# 1000000;
	end
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #2100000 1'b1;
	MPC_expected[5] = #200000 1'b0;
	MPC_expected[5] = #100000 1'b1;
	MPC_expected[5] = #500000 1'b0;
	MPC_expected[5] = #580000 1'b1;
	# 720000;
	repeat(4)
	begin
		MPC_expected[5] = 1'b0;
		MPC_expected[5] = #100000 1'b1;
		MPC_expected[5] = #300000 1'b0;
		MPC_expected[5] = #100000 1'b1;
		# 800000;
	end
	MPC_expected[5] = 1'b0;
	MPC_expected[5] = #400000 1'b1;
	MPC_expected[5] = #100000 1'b0;
end 
// expected MPC[ 4 ]
initial
begin
	MPC_expected[4] = 1'b0;
	# 380000;
	repeat(2)
	begin
		MPC_expected[4] = 1'b1;
		MPC_expected[4] = #620000 1'b0;
		# 180000;
	end
	MPC_expected[4] = 1'b1;
	MPC_expected[4] = #920000 1'b0;
	MPC_expected[4] = #1380000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #120000 1'b0;
	MPC_expected[4] = #680000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #620000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #220000 1'b0;
	MPC_expected[4] = #500000 1'b1;
	MPC_expected[4] = #1000000 1'b0;
	MPC_expected[4] = #1380000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #120000 1'b0;
	MPC_expected[4] = #680000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #620000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #220000 1'b0;
	MPC_expected[4] = #500000 1'b1;
	MPC_expected[4] = #1000000 1'b0;
	MPC_expected[4] = #1380000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #120000 1'b0;
	MPC_expected[4] = #680000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #620000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #220000 1'b0;
	MPC_expected[4] = #500000 1'b1;
	MPC_expected[4] = #1000000 1'b0;
	MPC_expected[4] = #1380000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #120000 1'b0;
	MPC_expected[4] = #680000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #620000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #220000 1'b0;
	MPC_expected[4] = #500000 1'b1;
	MPC_expected[4] = #1000000 1'b0;
	MPC_expected[4] = #1380000 1'b1;
	MPC_expected[4] = #420000 1'b0;
	MPC_expected[4] = #180000 1'b1;
	MPC_expected[4] = #120000 1'b0;
	MPC_expected[4] = #900000 1'b1;
	MPC_expected[4] = #300000 1'b0;
	# 400000;
	repeat(4)
	begin
		MPC_expected[4] = 1'b1;
		MPC_expected[4] = #500000 1'b0;
		# 800000;
	end
	MPC_expected[4] = 1'b1;
	MPC_expected[4] = #500000 1'b0;
	MPC_expected[4] = #100000 1'b1;
	MPC_expected[4] = #200000 1'b0;
	MPC_expected[4] = #100000 1'b1;
	MPC_expected[4] = #100000 1'b0;
end 
// expected MPC[ 3 ]
initial
begin
	MPC_expected[3] = 1'b0;
	# 500000;
	repeat(2)
	begin
		MPC_expected[3] = 1'b1;
		MPC_expected[3] = #200000 1'b0;
		MPC_expected[3] = #100000 1'b1;
		MPC_expected[3] = #200000 1'b0;
		# 300000;
	end
	MPC_expected[3] = 1'b1;
	MPC_expected[3] = #800000 1'b0;
	MPC_expected[3] = #600000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #180000 1'b1;
	MPC_expected[3] = #120000 1'b0;
	MPC_expected[3] = #200000 1'b1;
	MPC_expected[3] = #300000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #300000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #100000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #1100000 1'b1;
	MPC_expected[3] = #800000 1'b0;
	MPC_expected[3] = #600000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #180000 1'b1;
	MPC_expected[3] = #120000 1'b0;
	MPC_expected[3] = #200000 1'b1;
	MPC_expected[3] = #300000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #300000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #100000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #1100000 1'b1;
	MPC_expected[3] = #800000 1'b0;
	MPC_expected[3] = #600000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #180000 1'b1;
	MPC_expected[3] = #120000 1'b0;
	MPC_expected[3] = #200000 1'b1;
	MPC_expected[3] = #300000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #300000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #100000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #1100000 1'b1;
	MPC_expected[3] = #800000 1'b0;
	MPC_expected[3] = #600000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #180000 1'b1;
	MPC_expected[3] = #120000 1'b0;
	MPC_expected[3] = #200000 1'b1;
	MPC_expected[3] = #300000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #300000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #100000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #1100000 1'b1;
	MPC_expected[3] = #800000 1'b0;
	MPC_expected[3] = #600000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #400000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #180000 1'b1;
	MPC_expected[3] = #120000 1'b0;
	MPC_expected[3] = #200000 1'b1;
	MPC_expected[3] = #600000 1'b0;
	MPC_expected[3] = #580000 1'b1;
	# 220000;
	repeat(4)
	begin
		MPC_expected[3] = 1'b0;
		MPC_expected[3] = #1000000 1'b1;
		# 300000;
	end
	MPC_expected[3] = 1'b0;
	MPC_expected[3] = #600000 1'b1;
	MPC_expected[3] = #200000 1'b0;
	MPC_expected[3] = #100000 1'b1;
	MPC_expected[3] = #100000 1'b0;
end 
// expected MPC[ 2 ]
initial
begin
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		MPC_expected[2] = #100000 1'b0;
		MPC_expected[2] = #200000 1'b1;
		# 100000;
	end
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #380000 1'b1;
	MPC_expected[2] = #120000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		# 200000;
	end
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #500000 1'b1;
	MPC_expected[2] = #500000 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #200000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #380000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #780000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #100000 1'b1;
	MPC_expected[2] = #200000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		# 200000;
	end
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #500000 1'b1;
	MPC_expected[2] = #500000 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #200000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #380000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #780000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #100000 1'b1;
	MPC_expected[2] = #200000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		# 200000;
	end
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #500000 1'b1;
	MPC_expected[2] = #500000 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #200000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #380000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #780000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #100000 1'b1;
	MPC_expected[2] = #200000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		# 200000;
	end
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #500000 1'b1;
	MPC_expected[2] = #500000 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #200000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #380000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #780000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #100000 1'b1;
	MPC_expected[2] = #200000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		# 200000;
	end
	MPC_expected[2] = 1'b0;
	MPC_expected[2] = #180000 1'b1;
	MPC_expected[2] = #220000 1'b0;
	MPC_expected[2] = #500000 1'b1;
	MPC_expected[2] = #300000 1'b0;
	MPC_expected[2] = #400000 1'b1;
	MPC_expected[2] = #100000 1'b0;
	MPC_expected[2] = #580000 1'b1;
	# 220000;
	repeat(4)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		MPC_expected[2] = #100000 1'b0;
		MPC_expected[2] = #500000 1'b1;
		# 300000;
	end
	repeat(2)
	begin
		MPC_expected[2] = 1'b0;
		MPC_expected[2] = #400000 1'b1;
		# 100000;
	end
	MPC_expected[2] = 1'b0;
end 
// expected MPC[ 1 ]
initial
begin
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #100000 1'b0;
	# 100000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		MPC_expected[1] = #80000 1'b1;
		MPC_expected[1] = #20000 1'b0;
		MPC_expected[1] = #100000 1'b1;
		MPC_expected[1] = #300000 1'b0;
		# 200000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #80000 1'b1;
	# 120000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #200000 1'b1;
		# 200000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #200000 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #80000 1'b1;
	MPC_expected[1] = #20000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #200000 1'b1;
		# 200000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #200000 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #80000 1'b1;
	MPC_expected[1] = #20000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #200000 1'b1;
		# 200000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #200000 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #80000 1'b1;
	MPC_expected[1] = #20000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #200000 1'b1;
		# 200000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #200000 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #80000 1'b1;
	MPC_expected[1] = #20000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #300000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	# 400000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #200000 1'b1;
		# 200000;
	end
	MPC_expected[1] = 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #400000 1'b0;
	# 200000;
	repeat(2)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #200000 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #300000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #180000 1'b0;
	# 120000;
	repeat(4)
	begin
		MPC_expected[1] = 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #100000 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #200000 1'b1;
		MPC_expected[1] = #200000 1'b0;
		MPC_expected[1] = #100000 1'b1;
		MPC_expected[1] = #100000 1'b0;
		# 200000;
	end
	MPC_expected[1] = 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #200000 1'b1;
	MPC_expected[1] = #200000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	MPC_expected[1] = #100000 1'b0;
	MPC_expected[1] = #100000 1'b1;
	# 300000;
	repeat(6)
	begin
		MPC_expected[1] = 1'b0;
		MPC_expected[1] = #100000 1'b1;
		# 100000;
	end
end 
// expected MPC[ 0 ]
initial
begin
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #380000 1'b1;
	MPC_expected[0] = #20000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	MPC_expected[0] = #20000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	# 20000;
	repeat(10)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(6)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(3)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(2)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	# 300000;
	repeat(10)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(6)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(3)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(2)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	# 300000;
	repeat(10)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(6)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(3)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(2)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	# 300000;
	repeat(10)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(6)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(3)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(2)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #80000 1'b0;
	MPC_expected[0] = #20000 1'b1;
	MPC_expected[0] = #100000 1'b0;
	# 300000;
	repeat(10)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #180000 1'b1;
	# 20000;
	repeat(6)
	begin
		MPC_expected[0] = 1'b0;
		MPC_expected[0] = #100000 1'b1;
		# 100000;
	end
	MPC_expected[0] = 1'b0;
	MPC_expected[0] = #100000 1'b1;
	MPC_expected[0] = #200000 1'b0;
	# 200000;
	repeat(4)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 400000;
		repeat(2)
		begin
			MPC_expected[0] = 1'b1;
			MPC_expected[0] = #100000 1'b0;
			# 100000;
		end
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 300000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	# 400000;
	repeat(2)
	begin
		MPC_expected[0] = 1'b1;
		MPC_expected[0] = #100000 1'b0;
		# 100000;
	end
	MPC_expected[0] = 1'b1;
	MPC_expected[0] = #100000 1'b0;
	MPC_expected[0] = #200000 1'b1;
	MPC_expected[0] = #100000 1'b0;
end 

// expected DATA_MEM[0]
initial
begin
	DATA_MEM_expected[0] = 1'bX;
end 

// expected DATA_MEM[1]
initial
begin
	DATA_MEM_expected[1] = 1'bX;
end 

// expected DATA_MEM[2]
initial
begin
	DATA_MEM_expected[2] = 1'bX;
end 

// expected DATA_MEM[3]
initial
begin
	DATA_MEM_expected[3] = 1'bX;
end 

// expected DATA_MEM[4]
initial
begin
	DATA_MEM_expected[4] = 1'bX;
end 

// expected DATA_MEM[5]
initial
begin
	DATA_MEM_expected[5] = 1'bX;
end 

// expected DATA_MEM[6]
initial
begin
	DATA_MEM_expected[6] = 1'bX;
end 

// expected DATA_MEM[7]
initial
begin
	DATA_MEM_expected[7] = 1'bX;
end 

// expected DATA_MEM[8]
initial
begin
	DATA_MEM_expected[8] = 1'bX;
end 

// expected DATA_MEM[9]
initial
begin
	DATA_MEM_expected[9] = 1'bX;
end 

// expected DATA_MEM[10]
initial
begin
	DATA_MEM_expected[10] = 1'bX;
end 

// expected DATA_MEM[11]
initial
begin
	DATA_MEM_expected[11] = 1'bX;
end 

// expected DATA_MEM[12]
initial
begin
	DATA_MEM_expected[12] = 1'bX;
end 

// expected DATA_MEM[13]
initial
begin
	DATA_MEM_expected[13] = 1'bX;
end 

// expected DATA_MEM[14]
initial
begin
	DATA_MEM_expected[14] = 1'bX;
end 

// expected DATA_MEM[15]
initial
begin
	DATA_MEM_expected[15] = 1'bX;
end 

// expected DATA_MEM[16]
initial
begin
	DATA_MEM_expected[16] = 1'bX;
end 

// expected DATA_MEM[17]
initial
begin
	DATA_MEM_expected[17] = 1'bX;
end 

// expected DATA_MEM[18]
initial
begin
	DATA_MEM_expected[18] = 1'bX;
end 

// expected DATA_MEM[19]
initial
begin
	DATA_MEM_expected[19] = 1'bX;
end 

// expected DATA_MEM[20]
initial
begin
	DATA_MEM_expected[20] = 1'bX;
end 

// expected DATA_MEM[21]
initial
begin
	DATA_MEM_expected[21] = 1'bX;
end 

// expected DATA_MEM[22]
initial
begin
	DATA_MEM_expected[22] = 1'bX;
end 

// expected DATA_MEM[23]
initial
begin
	DATA_MEM_expected[23] = 1'bX;
end 

// expected DATA_MEM[24]
initial
begin
	DATA_MEM_expected[24] = 1'bX;
end 

// expected DATA_MEM[25]
initial
begin
	DATA_MEM_expected[25] = 1'bX;
end 

// expected DATA_MEM[26]
initial
begin
	DATA_MEM_expected[26] = 1'bX;
end 

// expected DATA_MEM[27]
initial
begin
	DATA_MEM_expected[27] = 1'bX;
end 

// expected DATA_MEM[28]
initial
begin
	DATA_MEM_expected[28] = 1'bX;
end 

// expected DATA_MEM[29]
initial
begin
	DATA_MEM_expected[29] = 1'bX;
end 

// expected DATA_MEM[30]
initial
begin
	DATA_MEM_expected[30] = 1'bX;
end 

// expected DATA_MEM[31]
initial
begin
	DATA_MEM_expected[31] = 1'bX;
end 
// generate trigger
always @(C_Bus_expected or C_Bus or DATA_MEM_expected or DATA_MEM or DATA_MEM_ADDR_expected or DATA_MEM_ADDR or DATA_MEM_OUT_expected or DATA_MEM_OUT or DATA_MEM_write_enable_expected or DATA_MEM_write_enable or MBR_OUT_expected or MBR_OUT or MIR_expected or MIR or MPC_expected or MPC or PC_expected or PC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C_Bus = %b | expected DATA_MEM = %b | expected DATA_MEM_ADDR = %b | expected DATA_MEM_OUT = %b | expected DATA_MEM_write_enable = %b | expected MBR_OUT = %b | expected MIR = %b | expected MPC = %b | expected PC = %b | ",C_Bus_expected_prev,DATA_MEM_expected_prev,DATA_MEM_ADDR_expected_prev,DATA_MEM_OUT_expected_prev,DATA_MEM_write_enable_expected_prev,MBR_OUT_expected_prev,MIR_expected_prev,MPC_expected_prev,PC_expected_prev);
	$display("| real C_Bus = %b | real DATA_MEM = %b | real DATA_MEM_ADDR = %b | real DATA_MEM_OUT = %b | real DATA_MEM_write_enable = %b | real MBR_OUT = %b | real MIR = %b | real MPC = %b | real PC = %b | ",C_Bus_prev,DATA_MEM_prev,DATA_MEM_ADDR_prev,DATA_MEM_OUT_prev,DATA_MEM_write_enable_prev,MBR_OUT_prev,MIR_prev,MPC_prev,PC_prev);
`endif
	if (
		( DATA_MEM_expected_prev[0] !== 1'bx ) && ( DATA_MEM_prev[0] !== DATA_MEM_expected_prev[0] )
		&& ((DATA_MEM_expected_prev[0] !== last_DATA_MEM_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[0] = DATA_MEM_expected_prev[0];
	end
	if (
		( DATA_MEM_expected_prev[1] !== 1'bx ) && ( DATA_MEM_prev[1] !== DATA_MEM_expected_prev[1] )
		&& ((DATA_MEM_expected_prev[1] !== last_DATA_MEM_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[1] = DATA_MEM_expected_prev[1];
	end
	if (
		( DATA_MEM_expected_prev[2] !== 1'bx ) && ( DATA_MEM_prev[2] !== DATA_MEM_expected_prev[2] )
		&& ((DATA_MEM_expected_prev[2] !== last_DATA_MEM_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[2] = DATA_MEM_expected_prev[2];
	end
	if (
		( DATA_MEM_expected_prev[3] !== 1'bx ) && ( DATA_MEM_prev[3] !== DATA_MEM_expected_prev[3] )
		&& ((DATA_MEM_expected_prev[3] !== last_DATA_MEM_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[3] = DATA_MEM_expected_prev[3];
	end
	if (
		( DATA_MEM_expected_prev[4] !== 1'bx ) && ( DATA_MEM_prev[4] !== DATA_MEM_expected_prev[4] )
		&& ((DATA_MEM_expected_prev[4] !== last_DATA_MEM_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[4] = DATA_MEM_expected_prev[4];
	end
	if (
		( DATA_MEM_expected_prev[5] !== 1'bx ) && ( DATA_MEM_prev[5] !== DATA_MEM_expected_prev[5] )
		&& ((DATA_MEM_expected_prev[5] !== last_DATA_MEM_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[5] = DATA_MEM_expected_prev[5];
	end
	if (
		( DATA_MEM_expected_prev[6] !== 1'bx ) && ( DATA_MEM_prev[6] !== DATA_MEM_expected_prev[6] )
		&& ((DATA_MEM_expected_prev[6] !== last_DATA_MEM_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[6] = DATA_MEM_expected_prev[6];
	end
	if (
		( DATA_MEM_expected_prev[7] !== 1'bx ) && ( DATA_MEM_prev[7] !== DATA_MEM_expected_prev[7] )
		&& ((DATA_MEM_expected_prev[7] !== last_DATA_MEM_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[7] = DATA_MEM_expected_prev[7];
	end
	if (
		( DATA_MEM_expected_prev[8] !== 1'bx ) && ( DATA_MEM_prev[8] !== DATA_MEM_expected_prev[8] )
		&& ((DATA_MEM_expected_prev[8] !== last_DATA_MEM_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[8] = DATA_MEM_expected_prev[8];
	end
	if (
		( DATA_MEM_expected_prev[9] !== 1'bx ) && ( DATA_MEM_prev[9] !== DATA_MEM_expected_prev[9] )
		&& ((DATA_MEM_expected_prev[9] !== last_DATA_MEM_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[9] = DATA_MEM_expected_prev[9];
	end
	if (
		( DATA_MEM_expected_prev[10] !== 1'bx ) && ( DATA_MEM_prev[10] !== DATA_MEM_expected_prev[10] )
		&& ((DATA_MEM_expected_prev[10] !== last_DATA_MEM_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[10] = DATA_MEM_expected_prev[10];
	end
	if (
		( DATA_MEM_expected_prev[11] !== 1'bx ) && ( DATA_MEM_prev[11] !== DATA_MEM_expected_prev[11] )
		&& ((DATA_MEM_expected_prev[11] !== last_DATA_MEM_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[11] = DATA_MEM_expected_prev[11];
	end
	if (
		( DATA_MEM_expected_prev[12] !== 1'bx ) && ( DATA_MEM_prev[12] !== DATA_MEM_expected_prev[12] )
		&& ((DATA_MEM_expected_prev[12] !== last_DATA_MEM_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[12] = DATA_MEM_expected_prev[12];
	end
	if (
		( DATA_MEM_expected_prev[13] !== 1'bx ) && ( DATA_MEM_prev[13] !== DATA_MEM_expected_prev[13] )
		&& ((DATA_MEM_expected_prev[13] !== last_DATA_MEM_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[13] = DATA_MEM_expected_prev[13];
	end
	if (
		( DATA_MEM_expected_prev[14] !== 1'bx ) && ( DATA_MEM_prev[14] !== DATA_MEM_expected_prev[14] )
		&& ((DATA_MEM_expected_prev[14] !== last_DATA_MEM_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[14] = DATA_MEM_expected_prev[14];
	end
	if (
		( DATA_MEM_expected_prev[15] !== 1'bx ) && ( DATA_MEM_prev[15] !== DATA_MEM_expected_prev[15] )
		&& ((DATA_MEM_expected_prev[15] !== last_DATA_MEM_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[15] = DATA_MEM_expected_prev[15];
	end
	if (
		( DATA_MEM_expected_prev[16] !== 1'bx ) && ( DATA_MEM_prev[16] !== DATA_MEM_expected_prev[16] )
		&& ((DATA_MEM_expected_prev[16] !== last_DATA_MEM_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[16] = DATA_MEM_expected_prev[16];
	end
	if (
		( DATA_MEM_expected_prev[17] !== 1'bx ) && ( DATA_MEM_prev[17] !== DATA_MEM_expected_prev[17] )
		&& ((DATA_MEM_expected_prev[17] !== last_DATA_MEM_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[17] = DATA_MEM_expected_prev[17];
	end
	if (
		( DATA_MEM_expected_prev[18] !== 1'bx ) && ( DATA_MEM_prev[18] !== DATA_MEM_expected_prev[18] )
		&& ((DATA_MEM_expected_prev[18] !== last_DATA_MEM_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[18] = DATA_MEM_expected_prev[18];
	end
	if (
		( DATA_MEM_expected_prev[19] !== 1'bx ) && ( DATA_MEM_prev[19] !== DATA_MEM_expected_prev[19] )
		&& ((DATA_MEM_expected_prev[19] !== last_DATA_MEM_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[19] = DATA_MEM_expected_prev[19];
	end
	if (
		( DATA_MEM_expected_prev[20] !== 1'bx ) && ( DATA_MEM_prev[20] !== DATA_MEM_expected_prev[20] )
		&& ((DATA_MEM_expected_prev[20] !== last_DATA_MEM_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[20] = DATA_MEM_expected_prev[20];
	end
	if (
		( DATA_MEM_expected_prev[21] !== 1'bx ) && ( DATA_MEM_prev[21] !== DATA_MEM_expected_prev[21] )
		&& ((DATA_MEM_expected_prev[21] !== last_DATA_MEM_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[21] = DATA_MEM_expected_prev[21];
	end
	if (
		( DATA_MEM_expected_prev[22] !== 1'bx ) && ( DATA_MEM_prev[22] !== DATA_MEM_expected_prev[22] )
		&& ((DATA_MEM_expected_prev[22] !== last_DATA_MEM_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[22] = DATA_MEM_expected_prev[22];
	end
	if (
		( DATA_MEM_expected_prev[23] !== 1'bx ) && ( DATA_MEM_prev[23] !== DATA_MEM_expected_prev[23] )
		&& ((DATA_MEM_expected_prev[23] !== last_DATA_MEM_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[23] = DATA_MEM_expected_prev[23];
	end
	if (
		( DATA_MEM_expected_prev[24] !== 1'bx ) && ( DATA_MEM_prev[24] !== DATA_MEM_expected_prev[24] )
		&& ((DATA_MEM_expected_prev[24] !== last_DATA_MEM_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[24] = DATA_MEM_expected_prev[24];
	end
	if (
		( DATA_MEM_expected_prev[25] !== 1'bx ) && ( DATA_MEM_prev[25] !== DATA_MEM_expected_prev[25] )
		&& ((DATA_MEM_expected_prev[25] !== last_DATA_MEM_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[25] = DATA_MEM_expected_prev[25];
	end
	if (
		( DATA_MEM_expected_prev[26] !== 1'bx ) && ( DATA_MEM_prev[26] !== DATA_MEM_expected_prev[26] )
		&& ((DATA_MEM_expected_prev[26] !== last_DATA_MEM_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[26] = DATA_MEM_expected_prev[26];
	end
	if (
		( DATA_MEM_expected_prev[27] !== 1'bx ) && ( DATA_MEM_prev[27] !== DATA_MEM_expected_prev[27] )
		&& ((DATA_MEM_expected_prev[27] !== last_DATA_MEM_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[27] = DATA_MEM_expected_prev[27];
	end
	if (
		( DATA_MEM_expected_prev[28] !== 1'bx ) && ( DATA_MEM_prev[28] !== DATA_MEM_expected_prev[28] )
		&& ((DATA_MEM_expected_prev[28] !== last_DATA_MEM_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[28] = DATA_MEM_expected_prev[28];
	end
	if (
		( DATA_MEM_expected_prev[29] !== 1'bx ) && ( DATA_MEM_prev[29] !== DATA_MEM_expected_prev[29] )
		&& ((DATA_MEM_expected_prev[29] !== last_DATA_MEM_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[29] = DATA_MEM_expected_prev[29];
	end
	if (
		( DATA_MEM_expected_prev[30] !== 1'bx ) && ( DATA_MEM_prev[30] !== DATA_MEM_expected_prev[30] )
		&& ((DATA_MEM_expected_prev[30] !== last_DATA_MEM_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[30] = DATA_MEM_expected_prev[30];
	end
	if (
		( DATA_MEM_expected_prev[31] !== 1'bx ) && ( DATA_MEM_prev[31] !== DATA_MEM_expected_prev[31] )
		&& ((DATA_MEM_expected_prev[31] !== last_DATA_MEM_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_expected_prev);
		$display ("     Real value = %b", DATA_MEM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DATA_MEM_exp[31] = DATA_MEM_expected_prev[31];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[0] !== 1'bx ) && ( DATA_MEM_ADDR_prev[0] !== DATA_MEM_ADDR_expected_prev[0] )
		&& ((DATA_MEM_ADDR_expected_prev[0] !== last_DATA_MEM_ADDR_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[0] = DATA_MEM_ADDR_expected_prev[0];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[1] !== 1'bx ) && ( DATA_MEM_ADDR_prev[1] !== DATA_MEM_ADDR_expected_prev[1] )
		&& ((DATA_MEM_ADDR_expected_prev[1] !== last_DATA_MEM_ADDR_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[1] = DATA_MEM_ADDR_expected_prev[1];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[2] !== 1'bx ) && ( DATA_MEM_ADDR_prev[2] !== DATA_MEM_ADDR_expected_prev[2] )
		&& ((DATA_MEM_ADDR_expected_prev[2] !== last_DATA_MEM_ADDR_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[2] = DATA_MEM_ADDR_expected_prev[2];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[3] !== 1'bx ) && ( DATA_MEM_ADDR_prev[3] !== DATA_MEM_ADDR_expected_prev[3] )
		&& ((DATA_MEM_ADDR_expected_prev[3] !== last_DATA_MEM_ADDR_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[3] = DATA_MEM_ADDR_expected_prev[3];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[4] !== 1'bx ) && ( DATA_MEM_ADDR_prev[4] !== DATA_MEM_ADDR_expected_prev[4] )
		&& ((DATA_MEM_ADDR_expected_prev[4] !== last_DATA_MEM_ADDR_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[4] = DATA_MEM_ADDR_expected_prev[4];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[5] !== 1'bx ) && ( DATA_MEM_ADDR_prev[5] !== DATA_MEM_ADDR_expected_prev[5] )
		&& ((DATA_MEM_ADDR_expected_prev[5] !== last_DATA_MEM_ADDR_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[5] = DATA_MEM_ADDR_expected_prev[5];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[6] !== 1'bx ) && ( DATA_MEM_ADDR_prev[6] !== DATA_MEM_ADDR_expected_prev[6] )
		&& ((DATA_MEM_ADDR_expected_prev[6] !== last_DATA_MEM_ADDR_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[6] = DATA_MEM_ADDR_expected_prev[6];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[7] !== 1'bx ) && ( DATA_MEM_ADDR_prev[7] !== DATA_MEM_ADDR_expected_prev[7] )
		&& ((DATA_MEM_ADDR_expected_prev[7] !== last_DATA_MEM_ADDR_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[7] = DATA_MEM_ADDR_expected_prev[7];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[8] !== 1'bx ) && ( DATA_MEM_ADDR_prev[8] !== DATA_MEM_ADDR_expected_prev[8] )
		&& ((DATA_MEM_ADDR_expected_prev[8] !== last_DATA_MEM_ADDR_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[8] = DATA_MEM_ADDR_expected_prev[8];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[9] !== 1'bx ) && ( DATA_MEM_ADDR_prev[9] !== DATA_MEM_ADDR_expected_prev[9] )
		&& ((DATA_MEM_ADDR_expected_prev[9] !== last_DATA_MEM_ADDR_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[9] = DATA_MEM_ADDR_expected_prev[9];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[10] !== 1'bx ) && ( DATA_MEM_ADDR_prev[10] !== DATA_MEM_ADDR_expected_prev[10] )
		&& ((DATA_MEM_ADDR_expected_prev[10] !== last_DATA_MEM_ADDR_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[10] = DATA_MEM_ADDR_expected_prev[10];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[11] !== 1'bx ) && ( DATA_MEM_ADDR_prev[11] !== DATA_MEM_ADDR_expected_prev[11] )
		&& ((DATA_MEM_ADDR_expected_prev[11] !== last_DATA_MEM_ADDR_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[11] = DATA_MEM_ADDR_expected_prev[11];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[12] !== 1'bx ) && ( DATA_MEM_ADDR_prev[12] !== DATA_MEM_ADDR_expected_prev[12] )
		&& ((DATA_MEM_ADDR_expected_prev[12] !== last_DATA_MEM_ADDR_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[12] = DATA_MEM_ADDR_expected_prev[12];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[13] !== 1'bx ) && ( DATA_MEM_ADDR_prev[13] !== DATA_MEM_ADDR_expected_prev[13] )
		&& ((DATA_MEM_ADDR_expected_prev[13] !== last_DATA_MEM_ADDR_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[13] = DATA_MEM_ADDR_expected_prev[13];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[14] !== 1'bx ) && ( DATA_MEM_ADDR_prev[14] !== DATA_MEM_ADDR_expected_prev[14] )
		&& ((DATA_MEM_ADDR_expected_prev[14] !== last_DATA_MEM_ADDR_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[14] = DATA_MEM_ADDR_expected_prev[14];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[15] !== 1'bx ) && ( DATA_MEM_ADDR_prev[15] !== DATA_MEM_ADDR_expected_prev[15] )
		&& ((DATA_MEM_ADDR_expected_prev[15] !== last_DATA_MEM_ADDR_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[15] = DATA_MEM_ADDR_expected_prev[15];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[16] !== 1'bx ) && ( DATA_MEM_ADDR_prev[16] !== DATA_MEM_ADDR_expected_prev[16] )
		&& ((DATA_MEM_ADDR_expected_prev[16] !== last_DATA_MEM_ADDR_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[16] = DATA_MEM_ADDR_expected_prev[16];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[17] !== 1'bx ) && ( DATA_MEM_ADDR_prev[17] !== DATA_MEM_ADDR_expected_prev[17] )
		&& ((DATA_MEM_ADDR_expected_prev[17] !== last_DATA_MEM_ADDR_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[17] = DATA_MEM_ADDR_expected_prev[17];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[18] !== 1'bx ) && ( DATA_MEM_ADDR_prev[18] !== DATA_MEM_ADDR_expected_prev[18] )
		&& ((DATA_MEM_ADDR_expected_prev[18] !== last_DATA_MEM_ADDR_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[18] = DATA_MEM_ADDR_expected_prev[18];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[19] !== 1'bx ) && ( DATA_MEM_ADDR_prev[19] !== DATA_MEM_ADDR_expected_prev[19] )
		&& ((DATA_MEM_ADDR_expected_prev[19] !== last_DATA_MEM_ADDR_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[19] = DATA_MEM_ADDR_expected_prev[19];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[20] !== 1'bx ) && ( DATA_MEM_ADDR_prev[20] !== DATA_MEM_ADDR_expected_prev[20] )
		&& ((DATA_MEM_ADDR_expected_prev[20] !== last_DATA_MEM_ADDR_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[20] = DATA_MEM_ADDR_expected_prev[20];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[21] !== 1'bx ) && ( DATA_MEM_ADDR_prev[21] !== DATA_MEM_ADDR_expected_prev[21] )
		&& ((DATA_MEM_ADDR_expected_prev[21] !== last_DATA_MEM_ADDR_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[21] = DATA_MEM_ADDR_expected_prev[21];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[22] !== 1'bx ) && ( DATA_MEM_ADDR_prev[22] !== DATA_MEM_ADDR_expected_prev[22] )
		&& ((DATA_MEM_ADDR_expected_prev[22] !== last_DATA_MEM_ADDR_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[22] = DATA_MEM_ADDR_expected_prev[22];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[23] !== 1'bx ) && ( DATA_MEM_ADDR_prev[23] !== DATA_MEM_ADDR_expected_prev[23] )
		&& ((DATA_MEM_ADDR_expected_prev[23] !== last_DATA_MEM_ADDR_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[23] = DATA_MEM_ADDR_expected_prev[23];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[24] !== 1'bx ) && ( DATA_MEM_ADDR_prev[24] !== DATA_MEM_ADDR_expected_prev[24] )
		&& ((DATA_MEM_ADDR_expected_prev[24] !== last_DATA_MEM_ADDR_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[24] = DATA_MEM_ADDR_expected_prev[24];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[25] !== 1'bx ) && ( DATA_MEM_ADDR_prev[25] !== DATA_MEM_ADDR_expected_prev[25] )
		&& ((DATA_MEM_ADDR_expected_prev[25] !== last_DATA_MEM_ADDR_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[25] = DATA_MEM_ADDR_expected_prev[25];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[26] !== 1'bx ) && ( DATA_MEM_ADDR_prev[26] !== DATA_MEM_ADDR_expected_prev[26] )
		&& ((DATA_MEM_ADDR_expected_prev[26] !== last_DATA_MEM_ADDR_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[26] = DATA_MEM_ADDR_expected_prev[26];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[27] !== 1'bx ) && ( DATA_MEM_ADDR_prev[27] !== DATA_MEM_ADDR_expected_prev[27] )
		&& ((DATA_MEM_ADDR_expected_prev[27] !== last_DATA_MEM_ADDR_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[27] = DATA_MEM_ADDR_expected_prev[27];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[28] !== 1'bx ) && ( DATA_MEM_ADDR_prev[28] !== DATA_MEM_ADDR_expected_prev[28] )
		&& ((DATA_MEM_ADDR_expected_prev[28] !== last_DATA_MEM_ADDR_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[28] = DATA_MEM_ADDR_expected_prev[28];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[29] !== 1'bx ) && ( DATA_MEM_ADDR_prev[29] !== DATA_MEM_ADDR_expected_prev[29] )
		&& ((DATA_MEM_ADDR_expected_prev[29] !== last_DATA_MEM_ADDR_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[29] = DATA_MEM_ADDR_expected_prev[29];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[30] !== 1'bx ) && ( DATA_MEM_ADDR_prev[30] !== DATA_MEM_ADDR_expected_prev[30] )
		&& ((DATA_MEM_ADDR_expected_prev[30] !== last_DATA_MEM_ADDR_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[30] = DATA_MEM_ADDR_expected_prev[30];
	end
	if (
		( DATA_MEM_ADDR_expected_prev[31] !== 1'bx ) && ( DATA_MEM_ADDR_prev[31] !== DATA_MEM_ADDR_expected_prev[31] )
		&& ((DATA_MEM_ADDR_expected_prev[31] !== last_DATA_MEM_ADDR_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_ADDR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_ADDR_expected_prev);
		$display ("     Real value = %b", DATA_MEM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DATA_MEM_ADDR_exp[31] = DATA_MEM_ADDR_expected_prev[31];
	end
	if (
		( DATA_MEM_OUT_expected_prev[0] !== 1'bx ) && ( DATA_MEM_OUT_prev[0] !== DATA_MEM_OUT_expected_prev[0] )
		&& ((DATA_MEM_OUT_expected_prev[0] !== last_DATA_MEM_OUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[0] = DATA_MEM_OUT_expected_prev[0];
	end
	if (
		( DATA_MEM_OUT_expected_prev[1] !== 1'bx ) && ( DATA_MEM_OUT_prev[1] !== DATA_MEM_OUT_expected_prev[1] )
		&& ((DATA_MEM_OUT_expected_prev[1] !== last_DATA_MEM_OUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[1] = DATA_MEM_OUT_expected_prev[1];
	end
	if (
		( DATA_MEM_OUT_expected_prev[2] !== 1'bx ) && ( DATA_MEM_OUT_prev[2] !== DATA_MEM_OUT_expected_prev[2] )
		&& ((DATA_MEM_OUT_expected_prev[2] !== last_DATA_MEM_OUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[2] = DATA_MEM_OUT_expected_prev[2];
	end
	if (
		( DATA_MEM_OUT_expected_prev[3] !== 1'bx ) && ( DATA_MEM_OUT_prev[3] !== DATA_MEM_OUT_expected_prev[3] )
		&& ((DATA_MEM_OUT_expected_prev[3] !== last_DATA_MEM_OUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[3] = DATA_MEM_OUT_expected_prev[3];
	end
	if (
		( DATA_MEM_OUT_expected_prev[4] !== 1'bx ) && ( DATA_MEM_OUT_prev[4] !== DATA_MEM_OUT_expected_prev[4] )
		&& ((DATA_MEM_OUT_expected_prev[4] !== last_DATA_MEM_OUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[4] = DATA_MEM_OUT_expected_prev[4];
	end
	if (
		( DATA_MEM_OUT_expected_prev[5] !== 1'bx ) && ( DATA_MEM_OUT_prev[5] !== DATA_MEM_OUT_expected_prev[5] )
		&& ((DATA_MEM_OUT_expected_prev[5] !== last_DATA_MEM_OUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[5] = DATA_MEM_OUT_expected_prev[5];
	end
	if (
		( DATA_MEM_OUT_expected_prev[6] !== 1'bx ) && ( DATA_MEM_OUT_prev[6] !== DATA_MEM_OUT_expected_prev[6] )
		&& ((DATA_MEM_OUT_expected_prev[6] !== last_DATA_MEM_OUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[6] = DATA_MEM_OUT_expected_prev[6];
	end
	if (
		( DATA_MEM_OUT_expected_prev[7] !== 1'bx ) && ( DATA_MEM_OUT_prev[7] !== DATA_MEM_OUT_expected_prev[7] )
		&& ((DATA_MEM_OUT_expected_prev[7] !== last_DATA_MEM_OUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[7] = DATA_MEM_OUT_expected_prev[7];
	end
	if (
		( DATA_MEM_OUT_expected_prev[8] !== 1'bx ) && ( DATA_MEM_OUT_prev[8] !== DATA_MEM_OUT_expected_prev[8] )
		&& ((DATA_MEM_OUT_expected_prev[8] !== last_DATA_MEM_OUT_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[8] = DATA_MEM_OUT_expected_prev[8];
	end
	if (
		( DATA_MEM_OUT_expected_prev[9] !== 1'bx ) && ( DATA_MEM_OUT_prev[9] !== DATA_MEM_OUT_expected_prev[9] )
		&& ((DATA_MEM_OUT_expected_prev[9] !== last_DATA_MEM_OUT_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[9] = DATA_MEM_OUT_expected_prev[9];
	end
	if (
		( DATA_MEM_OUT_expected_prev[10] !== 1'bx ) && ( DATA_MEM_OUT_prev[10] !== DATA_MEM_OUT_expected_prev[10] )
		&& ((DATA_MEM_OUT_expected_prev[10] !== last_DATA_MEM_OUT_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[10] = DATA_MEM_OUT_expected_prev[10];
	end
	if (
		( DATA_MEM_OUT_expected_prev[11] !== 1'bx ) && ( DATA_MEM_OUT_prev[11] !== DATA_MEM_OUT_expected_prev[11] )
		&& ((DATA_MEM_OUT_expected_prev[11] !== last_DATA_MEM_OUT_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[11] = DATA_MEM_OUT_expected_prev[11];
	end
	if (
		( DATA_MEM_OUT_expected_prev[12] !== 1'bx ) && ( DATA_MEM_OUT_prev[12] !== DATA_MEM_OUT_expected_prev[12] )
		&& ((DATA_MEM_OUT_expected_prev[12] !== last_DATA_MEM_OUT_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[12] = DATA_MEM_OUT_expected_prev[12];
	end
	if (
		( DATA_MEM_OUT_expected_prev[13] !== 1'bx ) && ( DATA_MEM_OUT_prev[13] !== DATA_MEM_OUT_expected_prev[13] )
		&& ((DATA_MEM_OUT_expected_prev[13] !== last_DATA_MEM_OUT_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[13] = DATA_MEM_OUT_expected_prev[13];
	end
	if (
		( DATA_MEM_OUT_expected_prev[14] !== 1'bx ) && ( DATA_MEM_OUT_prev[14] !== DATA_MEM_OUT_expected_prev[14] )
		&& ((DATA_MEM_OUT_expected_prev[14] !== last_DATA_MEM_OUT_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[14] = DATA_MEM_OUT_expected_prev[14];
	end
	if (
		( DATA_MEM_OUT_expected_prev[15] !== 1'bx ) && ( DATA_MEM_OUT_prev[15] !== DATA_MEM_OUT_expected_prev[15] )
		&& ((DATA_MEM_OUT_expected_prev[15] !== last_DATA_MEM_OUT_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[15] = DATA_MEM_OUT_expected_prev[15];
	end
	if (
		( DATA_MEM_OUT_expected_prev[16] !== 1'bx ) && ( DATA_MEM_OUT_prev[16] !== DATA_MEM_OUT_expected_prev[16] )
		&& ((DATA_MEM_OUT_expected_prev[16] !== last_DATA_MEM_OUT_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[16] = DATA_MEM_OUT_expected_prev[16];
	end
	if (
		( DATA_MEM_OUT_expected_prev[17] !== 1'bx ) && ( DATA_MEM_OUT_prev[17] !== DATA_MEM_OUT_expected_prev[17] )
		&& ((DATA_MEM_OUT_expected_prev[17] !== last_DATA_MEM_OUT_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[17] = DATA_MEM_OUT_expected_prev[17];
	end
	if (
		( DATA_MEM_OUT_expected_prev[18] !== 1'bx ) && ( DATA_MEM_OUT_prev[18] !== DATA_MEM_OUT_expected_prev[18] )
		&& ((DATA_MEM_OUT_expected_prev[18] !== last_DATA_MEM_OUT_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[18] = DATA_MEM_OUT_expected_prev[18];
	end
	if (
		( DATA_MEM_OUT_expected_prev[19] !== 1'bx ) && ( DATA_MEM_OUT_prev[19] !== DATA_MEM_OUT_expected_prev[19] )
		&& ((DATA_MEM_OUT_expected_prev[19] !== last_DATA_MEM_OUT_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[19] = DATA_MEM_OUT_expected_prev[19];
	end
	if (
		( DATA_MEM_OUT_expected_prev[20] !== 1'bx ) && ( DATA_MEM_OUT_prev[20] !== DATA_MEM_OUT_expected_prev[20] )
		&& ((DATA_MEM_OUT_expected_prev[20] !== last_DATA_MEM_OUT_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[20] = DATA_MEM_OUT_expected_prev[20];
	end
	if (
		( DATA_MEM_OUT_expected_prev[21] !== 1'bx ) && ( DATA_MEM_OUT_prev[21] !== DATA_MEM_OUT_expected_prev[21] )
		&& ((DATA_MEM_OUT_expected_prev[21] !== last_DATA_MEM_OUT_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[21] = DATA_MEM_OUT_expected_prev[21];
	end
	if (
		( DATA_MEM_OUT_expected_prev[22] !== 1'bx ) && ( DATA_MEM_OUT_prev[22] !== DATA_MEM_OUT_expected_prev[22] )
		&& ((DATA_MEM_OUT_expected_prev[22] !== last_DATA_MEM_OUT_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[22] = DATA_MEM_OUT_expected_prev[22];
	end
	if (
		( DATA_MEM_OUT_expected_prev[23] !== 1'bx ) && ( DATA_MEM_OUT_prev[23] !== DATA_MEM_OUT_expected_prev[23] )
		&& ((DATA_MEM_OUT_expected_prev[23] !== last_DATA_MEM_OUT_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[23] = DATA_MEM_OUT_expected_prev[23];
	end
	if (
		( DATA_MEM_OUT_expected_prev[24] !== 1'bx ) && ( DATA_MEM_OUT_prev[24] !== DATA_MEM_OUT_expected_prev[24] )
		&& ((DATA_MEM_OUT_expected_prev[24] !== last_DATA_MEM_OUT_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[24] = DATA_MEM_OUT_expected_prev[24];
	end
	if (
		( DATA_MEM_OUT_expected_prev[25] !== 1'bx ) && ( DATA_MEM_OUT_prev[25] !== DATA_MEM_OUT_expected_prev[25] )
		&& ((DATA_MEM_OUT_expected_prev[25] !== last_DATA_MEM_OUT_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[25] = DATA_MEM_OUT_expected_prev[25];
	end
	if (
		( DATA_MEM_OUT_expected_prev[26] !== 1'bx ) && ( DATA_MEM_OUT_prev[26] !== DATA_MEM_OUT_expected_prev[26] )
		&& ((DATA_MEM_OUT_expected_prev[26] !== last_DATA_MEM_OUT_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[26] = DATA_MEM_OUT_expected_prev[26];
	end
	if (
		( DATA_MEM_OUT_expected_prev[27] !== 1'bx ) && ( DATA_MEM_OUT_prev[27] !== DATA_MEM_OUT_expected_prev[27] )
		&& ((DATA_MEM_OUT_expected_prev[27] !== last_DATA_MEM_OUT_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[27] = DATA_MEM_OUT_expected_prev[27];
	end
	if (
		( DATA_MEM_OUT_expected_prev[28] !== 1'bx ) && ( DATA_MEM_OUT_prev[28] !== DATA_MEM_OUT_expected_prev[28] )
		&& ((DATA_MEM_OUT_expected_prev[28] !== last_DATA_MEM_OUT_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[28] = DATA_MEM_OUT_expected_prev[28];
	end
	if (
		( DATA_MEM_OUT_expected_prev[29] !== 1'bx ) && ( DATA_MEM_OUT_prev[29] !== DATA_MEM_OUT_expected_prev[29] )
		&& ((DATA_MEM_OUT_expected_prev[29] !== last_DATA_MEM_OUT_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[29] = DATA_MEM_OUT_expected_prev[29];
	end
	if (
		( DATA_MEM_OUT_expected_prev[30] !== 1'bx ) && ( DATA_MEM_OUT_prev[30] !== DATA_MEM_OUT_expected_prev[30] )
		&& ((DATA_MEM_OUT_expected_prev[30] !== last_DATA_MEM_OUT_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[30] = DATA_MEM_OUT_expected_prev[30];
	end
	if (
		( DATA_MEM_OUT_expected_prev[31] !== 1'bx ) && ( DATA_MEM_OUT_prev[31] !== DATA_MEM_OUT_expected_prev[31] )
		&& ((DATA_MEM_OUT_expected_prev[31] !== last_DATA_MEM_OUT_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_OUT[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_OUT_expected_prev);
		$display ("     Real value = %b", DATA_MEM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DATA_MEM_OUT_exp[31] = DATA_MEM_OUT_expected_prev[31];
	end
	if (
		( DATA_MEM_write_enable_expected_prev !== 1'bx ) && ( DATA_MEM_write_enable_prev !== DATA_MEM_write_enable_expected_prev )
		&& ((DATA_MEM_write_enable_expected_prev !== last_DATA_MEM_write_enable_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA_MEM_write_enable :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_MEM_write_enable_expected_prev);
		$display ("     Real value = %b", DATA_MEM_write_enable_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_DATA_MEM_write_enable_exp = DATA_MEM_write_enable_expected_prev;
	end
	if (
		( MBR_OUT_expected_prev[0] !== 1'bx ) && ( MBR_OUT_prev[0] !== MBR_OUT_expected_prev[0] )
		&& ((MBR_OUT_expected_prev[0] !== last_MBR_OUT_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[0] = MBR_OUT_expected_prev[0];
	end
	if (
		( MBR_OUT_expected_prev[1] !== 1'bx ) && ( MBR_OUT_prev[1] !== MBR_OUT_expected_prev[1] )
		&& ((MBR_OUT_expected_prev[1] !== last_MBR_OUT_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[1] = MBR_OUT_expected_prev[1];
	end
	if (
		( MBR_OUT_expected_prev[2] !== 1'bx ) && ( MBR_OUT_prev[2] !== MBR_OUT_expected_prev[2] )
		&& ((MBR_OUT_expected_prev[2] !== last_MBR_OUT_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[2] = MBR_OUT_expected_prev[2];
	end
	if (
		( MBR_OUT_expected_prev[3] !== 1'bx ) && ( MBR_OUT_prev[3] !== MBR_OUT_expected_prev[3] )
		&& ((MBR_OUT_expected_prev[3] !== last_MBR_OUT_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[3] = MBR_OUT_expected_prev[3];
	end
	if (
		( MBR_OUT_expected_prev[4] !== 1'bx ) && ( MBR_OUT_prev[4] !== MBR_OUT_expected_prev[4] )
		&& ((MBR_OUT_expected_prev[4] !== last_MBR_OUT_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[4] = MBR_OUT_expected_prev[4];
	end
	if (
		( MBR_OUT_expected_prev[5] !== 1'bx ) && ( MBR_OUT_prev[5] !== MBR_OUT_expected_prev[5] )
		&& ((MBR_OUT_expected_prev[5] !== last_MBR_OUT_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[5] = MBR_OUT_expected_prev[5];
	end
	if (
		( MBR_OUT_expected_prev[6] !== 1'bx ) && ( MBR_OUT_prev[6] !== MBR_OUT_expected_prev[6] )
		&& ((MBR_OUT_expected_prev[6] !== last_MBR_OUT_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[6] = MBR_OUT_expected_prev[6];
	end
	if (
		( MBR_OUT_expected_prev[7] !== 1'bx ) && ( MBR_OUT_prev[7] !== MBR_OUT_expected_prev[7] )
		&& ((MBR_OUT_expected_prev[7] !== last_MBR_OUT_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MBR_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MBR_OUT_expected_prev);
		$display ("     Real value = %b", MBR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_MBR_OUT_exp[7] = MBR_OUT_expected_prev[7];
	end
	if (
		( MIR_expected_prev[0] !== 1'bx ) && ( MIR_prev[0] !== MIR_expected_prev[0] )
		&& ((MIR_expected_prev[0] !== last_MIR_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[0] = MIR_expected_prev[0];
	end
	if (
		( MIR_expected_prev[1] !== 1'bx ) && ( MIR_prev[1] !== MIR_expected_prev[1] )
		&& ((MIR_expected_prev[1] !== last_MIR_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[1] = MIR_expected_prev[1];
	end
	if (
		( MIR_expected_prev[2] !== 1'bx ) && ( MIR_prev[2] !== MIR_expected_prev[2] )
		&& ((MIR_expected_prev[2] !== last_MIR_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[2] = MIR_expected_prev[2];
	end
	if (
		( MIR_expected_prev[3] !== 1'bx ) && ( MIR_prev[3] !== MIR_expected_prev[3] )
		&& ((MIR_expected_prev[3] !== last_MIR_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[3] = MIR_expected_prev[3];
	end
	if (
		( MIR_expected_prev[4] !== 1'bx ) && ( MIR_prev[4] !== MIR_expected_prev[4] )
		&& ((MIR_expected_prev[4] !== last_MIR_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[4] = MIR_expected_prev[4];
	end
	if (
		( MIR_expected_prev[5] !== 1'bx ) && ( MIR_prev[5] !== MIR_expected_prev[5] )
		&& ((MIR_expected_prev[5] !== last_MIR_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[5] = MIR_expected_prev[5];
	end
	if (
		( MIR_expected_prev[6] !== 1'bx ) && ( MIR_prev[6] !== MIR_expected_prev[6] )
		&& ((MIR_expected_prev[6] !== last_MIR_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[6] = MIR_expected_prev[6];
	end
	if (
		( MIR_expected_prev[7] !== 1'bx ) && ( MIR_prev[7] !== MIR_expected_prev[7] )
		&& ((MIR_expected_prev[7] !== last_MIR_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[7] = MIR_expected_prev[7];
	end
	if (
		( MIR_expected_prev[8] !== 1'bx ) && ( MIR_prev[8] !== MIR_expected_prev[8] )
		&& ((MIR_expected_prev[8] !== last_MIR_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[8] = MIR_expected_prev[8];
	end
	if (
		( MIR_expected_prev[9] !== 1'bx ) && ( MIR_prev[9] !== MIR_expected_prev[9] )
		&& ((MIR_expected_prev[9] !== last_MIR_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[9] = MIR_expected_prev[9];
	end
	if (
		( MIR_expected_prev[10] !== 1'bx ) && ( MIR_prev[10] !== MIR_expected_prev[10] )
		&& ((MIR_expected_prev[10] !== last_MIR_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[10] = MIR_expected_prev[10];
	end
	if (
		( MIR_expected_prev[11] !== 1'bx ) && ( MIR_prev[11] !== MIR_expected_prev[11] )
		&& ((MIR_expected_prev[11] !== last_MIR_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[11] = MIR_expected_prev[11];
	end
	if (
		( MIR_expected_prev[12] !== 1'bx ) && ( MIR_prev[12] !== MIR_expected_prev[12] )
		&& ((MIR_expected_prev[12] !== last_MIR_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[12] = MIR_expected_prev[12];
	end
	if (
		( MIR_expected_prev[13] !== 1'bx ) && ( MIR_prev[13] !== MIR_expected_prev[13] )
		&& ((MIR_expected_prev[13] !== last_MIR_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[13] = MIR_expected_prev[13];
	end
	if (
		( MIR_expected_prev[14] !== 1'bx ) && ( MIR_prev[14] !== MIR_expected_prev[14] )
		&& ((MIR_expected_prev[14] !== last_MIR_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[14] = MIR_expected_prev[14];
	end
	if (
		( MIR_expected_prev[15] !== 1'bx ) && ( MIR_prev[15] !== MIR_expected_prev[15] )
		&& ((MIR_expected_prev[15] !== last_MIR_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[15] = MIR_expected_prev[15];
	end
	if (
		( MIR_expected_prev[16] !== 1'bx ) && ( MIR_prev[16] !== MIR_expected_prev[16] )
		&& ((MIR_expected_prev[16] !== last_MIR_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[16] = MIR_expected_prev[16];
	end
	if (
		( MIR_expected_prev[17] !== 1'bx ) && ( MIR_prev[17] !== MIR_expected_prev[17] )
		&& ((MIR_expected_prev[17] !== last_MIR_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[17] = MIR_expected_prev[17];
	end
	if (
		( MIR_expected_prev[18] !== 1'bx ) && ( MIR_prev[18] !== MIR_expected_prev[18] )
		&& ((MIR_expected_prev[18] !== last_MIR_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[18] = MIR_expected_prev[18];
	end
	if (
		( MIR_expected_prev[19] !== 1'bx ) && ( MIR_prev[19] !== MIR_expected_prev[19] )
		&& ((MIR_expected_prev[19] !== last_MIR_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[19] = MIR_expected_prev[19];
	end
	if (
		( MIR_expected_prev[20] !== 1'bx ) && ( MIR_prev[20] !== MIR_expected_prev[20] )
		&& ((MIR_expected_prev[20] !== last_MIR_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[20] = MIR_expected_prev[20];
	end
	if (
		( MIR_expected_prev[21] !== 1'bx ) && ( MIR_prev[21] !== MIR_expected_prev[21] )
		&& ((MIR_expected_prev[21] !== last_MIR_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[21] = MIR_expected_prev[21];
	end
	if (
		( MIR_expected_prev[22] !== 1'bx ) && ( MIR_prev[22] !== MIR_expected_prev[22] )
		&& ((MIR_expected_prev[22] !== last_MIR_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[22] = MIR_expected_prev[22];
	end
	if (
		( MIR_expected_prev[23] !== 1'bx ) && ( MIR_prev[23] !== MIR_expected_prev[23] )
		&& ((MIR_expected_prev[23] !== last_MIR_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[23] = MIR_expected_prev[23];
	end
	if (
		( MIR_expected_prev[24] !== 1'bx ) && ( MIR_prev[24] !== MIR_expected_prev[24] )
		&& ((MIR_expected_prev[24] !== last_MIR_exp[24]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[24] = MIR_expected_prev[24];
	end
	if (
		( MIR_expected_prev[25] !== 1'bx ) && ( MIR_prev[25] !== MIR_expected_prev[25] )
		&& ((MIR_expected_prev[25] !== last_MIR_exp[25]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[25] = MIR_expected_prev[25];
	end
	if (
		( MIR_expected_prev[26] !== 1'bx ) && ( MIR_prev[26] !== MIR_expected_prev[26] )
		&& ((MIR_expected_prev[26] !== last_MIR_exp[26]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[26] = MIR_expected_prev[26];
	end
	if (
		( MIR_expected_prev[27] !== 1'bx ) && ( MIR_prev[27] !== MIR_expected_prev[27] )
		&& ((MIR_expected_prev[27] !== last_MIR_exp[27]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[27] = MIR_expected_prev[27];
	end
	if (
		( MIR_expected_prev[28] !== 1'bx ) && ( MIR_prev[28] !== MIR_expected_prev[28] )
		&& ((MIR_expected_prev[28] !== last_MIR_exp[28]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[28] = MIR_expected_prev[28];
	end
	if (
		( MIR_expected_prev[29] !== 1'bx ) && ( MIR_prev[29] !== MIR_expected_prev[29] )
		&& ((MIR_expected_prev[29] !== last_MIR_exp[29]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[29] = MIR_expected_prev[29];
	end
	if (
		( MIR_expected_prev[30] !== 1'bx ) && ( MIR_prev[30] !== MIR_expected_prev[30] )
		&& ((MIR_expected_prev[30] !== last_MIR_exp[30]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[30] = MIR_expected_prev[30];
	end
	if (
		( MIR_expected_prev[31] !== 1'bx ) && ( MIR_prev[31] !== MIR_expected_prev[31] )
		&& ((MIR_expected_prev[31] !== last_MIR_exp[31]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[31] = MIR_expected_prev[31];
	end
	if (
		( MIR_expected_prev[32] !== 1'bx ) && ( MIR_prev[32] !== MIR_expected_prev[32] )
		&& ((MIR_expected_prev[32] !== last_MIR_exp[32]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[32] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[32] = MIR_expected_prev[32];
	end
	if (
		( MIR_expected_prev[33] !== 1'bx ) && ( MIR_prev[33] !== MIR_expected_prev[33] )
		&& ((MIR_expected_prev[33] !== last_MIR_exp[33]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[33] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[33] = MIR_expected_prev[33];
	end
	if (
		( MIR_expected_prev[34] !== 1'bx ) && ( MIR_prev[34] !== MIR_expected_prev[34] )
		&& ((MIR_expected_prev[34] !== last_MIR_exp[34]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[34] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[34] = MIR_expected_prev[34];
	end
	if (
		( MIR_expected_prev[35] !== 1'bx ) && ( MIR_prev[35] !== MIR_expected_prev[35] )
		&& ((MIR_expected_prev[35] !== last_MIR_exp[35]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIR[35] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIR_expected_prev);
		$display ("     Real value = %b", MIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_MIR_exp[35] = MIR_expected_prev[35];
	end
	if (
		( MPC_expected_prev[0] !== 1'bx ) && ( MPC_prev[0] !== MPC_expected_prev[0] )
		&& ((MPC_expected_prev[0] !== last_MPC_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[0] = MPC_expected_prev[0];
	end
	if (
		( MPC_expected_prev[1] !== 1'bx ) && ( MPC_prev[1] !== MPC_expected_prev[1] )
		&& ((MPC_expected_prev[1] !== last_MPC_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[1] = MPC_expected_prev[1];
	end
	if (
		( MPC_expected_prev[2] !== 1'bx ) && ( MPC_prev[2] !== MPC_expected_prev[2] )
		&& ((MPC_expected_prev[2] !== last_MPC_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[2] = MPC_expected_prev[2];
	end
	if (
		( MPC_expected_prev[3] !== 1'bx ) && ( MPC_prev[3] !== MPC_expected_prev[3] )
		&& ((MPC_expected_prev[3] !== last_MPC_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[3] = MPC_expected_prev[3];
	end
	if (
		( MPC_expected_prev[4] !== 1'bx ) && ( MPC_prev[4] !== MPC_expected_prev[4] )
		&& ((MPC_expected_prev[4] !== last_MPC_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[4] = MPC_expected_prev[4];
	end
	if (
		( MPC_expected_prev[5] !== 1'bx ) && ( MPC_prev[5] !== MPC_expected_prev[5] )
		&& ((MPC_expected_prev[5] !== last_MPC_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[5] = MPC_expected_prev[5];
	end
	if (
		( MPC_expected_prev[6] !== 1'bx ) && ( MPC_prev[6] !== MPC_expected_prev[6] )
		&& ((MPC_expected_prev[6] !== last_MPC_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[6] = MPC_expected_prev[6];
	end
	if (
		( MPC_expected_prev[7] !== 1'bx ) && ( MPC_prev[7] !== MPC_expected_prev[7] )
		&& ((MPC_expected_prev[7] !== last_MPC_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[7] = MPC_expected_prev[7];
	end
	if (
		( MPC_expected_prev[8] !== 1'bx ) && ( MPC_prev[8] !== MPC_expected_prev[8] )
		&& ((MPC_expected_prev[8] !== last_MPC_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MPC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MPC_expected_prev);
		$display ("     Real value = %b", MPC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_MPC_exp[8] = MPC_expected_prev[8];
	end
	if (
		( PC_expected_prev[0] !== 1'bx ) && ( PC_prev[0] !== PC_expected_prev[0] )
		&& ((PC_expected_prev[0] !== last_PC_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[0] = PC_expected_prev[0];
	end
	if (
		( PC_expected_prev[1] !== 1'bx ) && ( PC_prev[1] !== PC_expected_prev[1] )
		&& ((PC_expected_prev[1] !== last_PC_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[1] = PC_expected_prev[1];
	end
	if (
		( PC_expected_prev[2] !== 1'bx ) && ( PC_prev[2] !== PC_expected_prev[2] )
		&& ((PC_expected_prev[2] !== last_PC_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[2] = PC_expected_prev[2];
	end
	if (
		( PC_expected_prev[3] !== 1'bx ) && ( PC_prev[3] !== PC_expected_prev[3] )
		&& ((PC_expected_prev[3] !== last_PC_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[3] = PC_expected_prev[3];
	end
	if (
		( PC_expected_prev[4] !== 1'bx ) && ( PC_prev[4] !== PC_expected_prev[4] )
		&& ((PC_expected_prev[4] !== last_PC_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[4] = PC_expected_prev[4];
	end
	if (
		( PC_expected_prev[5] !== 1'bx ) && ( PC_prev[5] !== PC_expected_prev[5] )
		&& ((PC_expected_prev[5] !== last_PC_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[5] = PC_expected_prev[5];
	end
	if (
		( PC_expected_prev[6] !== 1'bx ) && ( PC_prev[6] !== PC_expected_prev[6] )
		&& ((PC_expected_prev[6] !== last_PC_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[6] = PC_expected_prev[6];
	end
	if (
		( PC_expected_prev[7] !== 1'bx ) && ( PC_prev[7] !== PC_expected_prev[7] )
		&& ((PC_expected_prev[7] !== last_PC_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[7] = PC_expected_prev[7];
	end
	if (
		( PC_expected_prev[8] !== 1'bx ) && ( PC_prev[8] !== PC_expected_prev[8] )
		&& ((PC_expected_prev[8] !== last_PC_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[8] = PC_expected_prev[8];
	end
	if (
		( PC_expected_prev[9] !== 1'bx ) && ( PC_prev[9] !== PC_expected_prev[9] )
		&& ((PC_expected_prev[9] !== last_PC_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[9] = PC_expected_prev[9];
	end
	if (
		( PC_expected_prev[10] !== 1'bx ) && ( PC_prev[10] !== PC_expected_prev[10] )
		&& ((PC_expected_prev[10] !== last_PC_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[10] = PC_expected_prev[10];
	end
	if (
		( PC_expected_prev[11] !== 1'bx ) && ( PC_prev[11] !== PC_expected_prev[11] )
		&& ((PC_expected_prev[11] !== last_PC_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[11] = PC_expected_prev[11];
	end
	if (
		( PC_expected_prev[12] !== 1'bx ) && ( PC_prev[12] !== PC_expected_prev[12] )
		&& ((PC_expected_prev[12] !== last_PC_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[12] = PC_expected_prev[12];
	end
	if (
		( PC_expected_prev[13] !== 1'bx ) && ( PC_prev[13] !== PC_expected_prev[13] )
		&& ((PC_expected_prev[13] !== last_PC_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[13] = PC_expected_prev[13];
	end
	if (
		( PC_expected_prev[14] !== 1'bx ) && ( PC_prev[14] !== PC_expected_prev[14] )
		&& ((PC_expected_prev[14] !== last_PC_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[14] = PC_expected_prev[14];
	end
	if (
		( PC_expected_prev[15] !== 1'bx ) && ( PC_prev[15] !== PC_expected_prev[15] )
		&& ((PC_expected_prev[15] !== last_PC_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[15] = PC_expected_prev[15];
	end
	if (
		( PC_expected_prev[16] !== 1'bx ) && ( PC_prev[16] !== PC_expected_prev[16] )
		&& ((PC_expected_prev[16] !== last_PC_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[16] = PC_expected_prev[16];
	end
	if (
		( PC_expected_prev[17] !== 1'bx ) && ( PC_prev[17] !== PC_expected_prev[17] )
		&& ((PC_expected_prev[17] !== last_PC_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[17] = PC_expected_prev[17];
	end
	if (
		( PC_expected_prev[18] !== 1'bx ) && ( PC_prev[18] !== PC_expected_prev[18] )
		&& ((PC_expected_prev[18] !== last_PC_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[18] = PC_expected_prev[18];
	end
	if (
		( PC_expected_prev[19] !== 1'bx ) && ( PC_prev[19] !== PC_expected_prev[19] )
		&& ((PC_expected_prev[19] !== last_PC_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[19] = PC_expected_prev[19];
	end
	if (
		( PC_expected_prev[20] !== 1'bx ) && ( PC_prev[20] !== PC_expected_prev[20] )
		&& ((PC_expected_prev[20] !== last_PC_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[20] = PC_expected_prev[20];
	end
	if (
		( PC_expected_prev[21] !== 1'bx ) && ( PC_prev[21] !== PC_expected_prev[21] )
		&& ((PC_expected_prev[21] !== last_PC_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[21] = PC_expected_prev[21];
	end
	if (
		( PC_expected_prev[22] !== 1'bx ) && ( PC_prev[22] !== PC_expected_prev[22] )
		&& ((PC_expected_prev[22] !== last_PC_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[22] = PC_expected_prev[22];
	end
	if (
		( PC_expected_prev[23] !== 1'bx ) && ( PC_prev[23] !== PC_expected_prev[23] )
		&& ((PC_expected_prev[23] !== last_PC_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[23] = PC_expected_prev[23];
	end
	if (
		( PC_expected_prev[24] !== 1'bx ) && ( PC_prev[24] !== PC_expected_prev[24] )
		&& ((PC_expected_prev[24] !== last_PC_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[24] = PC_expected_prev[24];
	end
	if (
		( PC_expected_prev[25] !== 1'bx ) && ( PC_prev[25] !== PC_expected_prev[25] )
		&& ((PC_expected_prev[25] !== last_PC_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[25] = PC_expected_prev[25];
	end
	if (
		( PC_expected_prev[26] !== 1'bx ) && ( PC_prev[26] !== PC_expected_prev[26] )
		&& ((PC_expected_prev[26] !== last_PC_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[26] = PC_expected_prev[26];
	end
	if (
		( PC_expected_prev[27] !== 1'bx ) && ( PC_prev[27] !== PC_expected_prev[27] )
		&& ((PC_expected_prev[27] !== last_PC_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[27] = PC_expected_prev[27];
	end
	if (
		( PC_expected_prev[28] !== 1'bx ) && ( PC_prev[28] !== PC_expected_prev[28] )
		&& ((PC_expected_prev[28] !== last_PC_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[28] = PC_expected_prev[28];
	end
	if (
		( PC_expected_prev[29] !== 1'bx ) && ( PC_prev[29] !== PC_expected_prev[29] )
		&& ((PC_expected_prev[29] !== last_PC_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[29] = PC_expected_prev[29];
	end
	if (
		( PC_expected_prev[30] !== 1'bx ) && ( PC_prev[30] !== PC_expected_prev[30] )
		&& ((PC_expected_prev[30] !== last_PC_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[30] = PC_expected_prev[30];
	end
	if (
		( PC_expected_prev[31] !== 1'bx ) && ( PC_prev[31] !== PC_expected_prev[31] )
		&& ((PC_expected_prev[31] !== last_PC_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_expected_prev);
		$display ("     Real value = %b", PC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_PC_exp[31] = PC_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#40000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIC1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg LOADN;
// wires                                               
wire [31:0] C_Bus;
wire [31:0] DATA_MEM;
wire [31:0] DATA_MEM_ADDR;
wire [31:0] DATA_MEM_OUT;
wire DATA_MEM_write_enable;
wire [7:0] MBR_OUT;
wire [35:0] MIR;
wire [8:0] MPC;
wire [31:0] PC;

wire sampler;                             

// assign statements (if any)                          
MIC1 i1 (
// port map - connection between master ports and signals/registers   
	.C_Bus(C_Bus),
	.CLOCK(CLOCK),
	.DATA_MEM(DATA_MEM),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.LOADN(LOADN),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC)
);

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #80000 1'b1;
	#20000;
end 

// LOADN
initial
begin
	LOADN = 1'b1;
	LOADN = #10000 1'b0;
end 

MIC1_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.LOADN(LOADN),
	.sampler_tx(sampler)
);

MIC1_vlg_check_tst tb_out(
	.C_Bus(C_Bus),
	.DATA_MEM(DATA_MEM),
	.DATA_MEM_ADDR(DATA_MEM_ADDR),
	.DATA_MEM_OUT(DATA_MEM_OUT),
	.DATA_MEM_write_enable(DATA_MEM_write_enable),
	.MBR_OUT(MBR_OUT),
	.MIR(MIR),
	.MPC(MPC),
	.PC(PC),
	.sampler_rx(sampler)
);
endmodule

